{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;\f2\fnil\fcharset0 Menlo-Bold;
\f3\fnil\fcharset0 Menlo-Regular;\f4\fmodern\fcharset0 Courier;\f5\fnil\fcharset0 Menlo-Italic;
\f6\fswiss\fcharset0 Helvetica-Oblique;}
{\colortbl;\red255\green255\blue255;\red5\green68\blue254;\red0\green0\blue255;\red0\green61\blue204;
\red252\green39\blue18;\red174\green0\blue240;\red103\green103\blue103;\red174\green0\blue240;\red0\green0\blue0;
\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue0;\red251\green2\blue7;\red253\green164\blue159;
\red198\green50\blue253;\red0\green0\blue255;\red253\green183\blue155;\red102\green177\blue50;\red27\green29\blue31;
\red154\green154\blue154;\red255\green255\blue255;\red128\green128\blue128;\red179\green179\blue179;\red230\green87\blue141;
\red217\green11\blue5;\red252\green118\blue111;\red255\green255\blue10;\red9\green80\blue208;\red46\green111\blue253;
\red200\green20\blue201;\red46\green174\blue187;\red253\green193\blue49;\red253\green164\blue159;\red5\green61\blue204;
}
{\*\expandedcolortbl;;\cssrgb\c0\c38136\c99824;\cssrgb\c1680\c19835\c100000;\csgenericrgb\c0\c23922\c80000;
\cssrgb\c100000\c25271\c7591;\csgenericrgb\c68235\c0\c94118;\csgenericrgb\c40392\c40392\c40392;\cssrgb\c74609\c21796\c95404;\csgray\c0\c0;
\csgray\c100000;\csgray\c0;\cssrgb\c0\c0\c0;\cssrgb\c100000\c14913\c0;\cssrgb\c100000\c70952\c68453;
\cssrgb\c82670\c34053\c99466;\cssrgb\c1680\c19835\c100000;\cssrgb\c100000\c77015\c67035;\cssrgb\c46532\c73327\c25364;\cssrgb\c14118\c15294\c16078;
\csgray\c66775;\cssrgb\c100000\c100000\c100000;\csgray\c57415;\csgray\c75407;\cssrgb\c93000\c44193\c62103;
\cssrgb\c88946\c14202\c0;\cssrgb\c100000\c55025\c50890;\cssrgb\c99942\c98555\c0;\cssrgb\c0\c41176\c85098;\cssrgb\c22750\c53231\c99501;
\cssrgb\c83397\c23074\c82666;\cssrgb\c20199\c73241\c78251;\cssrgb\c99771\c79477\c24504;\cssrgb\c100000\c70952\c68453;\cssrgb\c0\c33896\c83855;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww34360\viewh18120\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs28 \cf2 ############################################################################################################################################################################################################\
#\
# 
\f1\b  Pipeline designed for a Linux cluster (Genotoul, http://bioinfo.genotoul.fr/) managed with SLURM [https://slurm.schedmd.com/overview.html]. \
#  Some adaptations may be required for other cluster management and job scheduling systems\
#\
# - example raw data are MiSeq paired end reads demultiplexed by the MiSeq instrument (Illumina SAV)\
# - construction after demultiplexing <=> ForwardPrimer----target gene------ReversePrimer
\f0\b0 \
############################################################################################################################################################################################################\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf3 #last update : Nov 8, 2023 by AC\cf0 \
\
\pard\pardeftab720\partightenfactor0
\cf4 #------------------------------------------------------------------------------------------------------------\
#Preliminary notes\
#------------------------------------------------------------------------------------------------------------\
\cf2 ### comments are in 
\f1\b \cf2 blue 
\f0\b0 \cf2 and start with hash (#); everything the shell encounters after a hash mark on a line is ignored\
### parts of the cmd you have/may want to change are in\cf0  
\f1\b \cf5 red
\f0\b0 \cf4 \
\cf2 ### important notes /warnings are in\cf4  
\f1\b \cf6 purple\

\f0\b0 \cf2 ### software parameters are in \cf7 grey
\f1\b \cf6 \

\f0\b0 \cf2 ### a full understanding of this pipeline requires basic knowledge of the awk programming language as scripts are created upfront with awk to be run on all samples in parallel
\f1\b \cf6 \
\pard\pardeftab720\partightenfactor0
\cf8 ### 
\f2\fs24 \cb9 \CocoaLigature0 DO NOT PAY ATTENTION TO THE FOLLOWING TYPE OF WARNING MESSAGE, WHICH IS GENERATED BY AWK, YOU ARE TOTALLY FINE \
\pard\pardeftab720\partightenfactor0

\f3\b0 \cf8 "awk: warning: escape sequence `\\/' treated as plain `/'.
\fs22 \cb10 "
\fs24 \cf11 \cb9 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\pardirnatural\partightenfactor0

\f0\fs28 \cf0 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 ### note that you will have to create SLURM scripts. I use the text editor "nano".\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 #the following cmd will open an empty sheet\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf12 \cb10 \CocoaLigature0 nano myscript.sh 
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
#in which you need to paste the content of the block materialized by dashes (Ctrl+C / Ctrl+V)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs20 \cf12 #-------------------------------\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\fs22 \cf11 \cb10 \CocoaLigature0 #!/bin/bash\
#SBATCH -J \cf13 myjob\cf12             \cf3 #job name\cf11 \
#SBATCH -p \cf13 workq\cf11             \cf3 #queue\cf11 \
#SBATCH -t \cf5 20:00            \cf3 #running time\cf11 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cb9 #SBATCH --cpus-per-task=
\f2\b \cf5 2   
\f3\b0 \cf3 #n CPUs to be used \cf11 \
#SBATCH --mem-per-cpu=\cf5 4\cf13 G
\fs20 \cf12 \cb1 \CocoaLigature1     \cf3 #memory to be used by each CPU\cf12 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf13 command with options\cf12  \
\
#-------------------------------
\f0\fs28 \cf2 \
#to get out of nano and save your script as "myscript.sh", you need to tip Ctrl+X\
#then you must follow instructions at the bottom of the terminal window to save your file\cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\pardirnatural\partightenfactor0
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 #Note on the example data set (input and output) are higligthed in \cf3 \cb14 \CocoaLigature0 Pale pink\cf2 \cb1 \CocoaLigature1 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf4 #------------------------------------------------------------------------------------------------------------------------------------------------------------------\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf4 \cb9 # Required softwares\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf4 \cb1 #------------------------------------------------------------------------------------------------------------------------------------------------------------------\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\pardirnatural\partightenfactor0
\cf2 \
#Note that all softwares have been installed on a dedicated module/directory of our cluster\
#scripts load softwares from that module and, then, execute programs\
#example\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs24 \cf12 \cb9 \CocoaLigature0 module load bioinfo/FastQC/0.12.1 \cf3 #load directory that contain FASTQC executables\cf13 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \CocoaLigature1 fastqc myfile.fastq   \cf3 #execute fastqc\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\pardirnatural\partightenfactor0

\f0\fs28 \cf15 \cb1 #you must adapt path to softwares (highligthed in red in the pipeline) to your own directory structure\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\pardirnatural\partightenfactor0
\cf16 #the following softwares are required to run the pipeline :\
\
#FASTQC\
\pard\pardeftab720\li720\fi-720\partightenfactor0
\cf16 \cb9 #Andrews S. 2010. FastQC - A Quality Control application for FastQ files. Available from {\field{\*\fldinst{HYPERLINK "https://www.bioinformatics.babraham.ac.uk/projects/fastqc/."}}{\fldrslt https://www.bioinformatics.babraham.ac.uk/projects/fastqc/.}}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\pardirnatural\partightenfactor0
\cf16 \cb1 \
#Trimmomatic\
#Bolger AM, Lohse M, and Usadel B. 2014. Trimmomatic: a flexible trimmer for Illumina sequence data. Bioinformatics 30:2114-2120. \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf16 #FLASH\
#Magoc T, and Salzberg SL. 2011. FLASH: fast length adjustment of short reads to improve genome assemblies. Bioinformatics 27:2957-2963. 10.1093/bioinformatics/btr507\
\
#VSEARCH\
#Rognes T, Flouri T, Nichols B, Quince C, and Mah\'e9 F. 2016. VSEARCH: a versatile open source tool for metagenomics. Peerj 4:e2584. 10.7717/peerj.2584\
\
\pard\pardeftab720\partightenfactor0
\cf16 #SWARM\
#Mahe F, Rognes T, Quince C, de Vargas C, and Dunthorn M. 2015. Swarm v2: highly-scalable and high-resolution amplicon clustering. Peerj 3. e142010.7717/peerj.1420\
\
#USEARCH\
#Edgar,RC (2010) Search and clustering orders of magnitude faster than BLAST, Bioinformatics 26(19), 2460-2461. doi: 10.1093/bioinformatics/btq461\
\
#MAFFT\
#Katoh K, and Standley DM. 2013. MAFFT multiple sequence alignment software version 7: improvements in performance and usability. Molecular Biology and Evolution 30:772-780. \
\
#post processing of sequence data : \
\
\pard\pardeftab720\partightenfactor0
\cf16 \cb9 #Geneious (or equivalent) to visualize sequences and alignments\
https://www.geneious.com\
\
#EMBOSS (transeq)\
EMBL's European Bioinformatics Institute\
https://emboss.sourceforge.net/download/\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf16 \CocoaLigature0 #Fasta2Phylip.pl\
#script Fasta2Phylip.pl by by Joseph Hughes, University of Glasgow available from https://github.com/josephhughes/Sequence-manipulation/tree/master\CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf16 \
#IQ-TREE\
Minh, B.Q., Schmidt, H.A., Chernomor, O., Schrempf, D., Woodhams, M.D., von Haeseler, A., Lanfear, R., 2020. IQ-TREE 2: New models and efficient methods for phylogenetic inference in the genomic era. Molecular Biology and Evolution 37, 1530-1534.\
Available online at http://www.iqtree.org/\
\
#Figtree (or equivalent) to visualise phylogenetic trees\
Rambaut, A., 2006. FigTree. Available online at http://tree.bio.ed.ac.uk/software/figtree/\cf4 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 \cb1 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf4 #------------------------------------------------------------------------------------------------------------------------------------------------------------------\
# Create Datadir and copy raw data to datadir\
#------------------------------------------------------------------------------------------------------------------------------------------------------------------\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\pardirnatural\partightenfactor0
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf12 \cb10 \CocoaLigature0 mkdir \cf5 datadir\cf11 \
\
\cf12 cd \cf5 datadir
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 #copy all your *.fastq.gz files to datadir\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf15 #you may test the pipeline on example data stored in the example/ directory of the github rep.\cf2 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf4 #------------------------------------------------------------------------------------------------------------------------------------------------------------------\
# Sample code format\
#------------------------------------------------------------------------------------------------------------------------------------------------------------------\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 \
#We manage a lot of samples for different type of experiments. \
#To make our life easier and pipelines as generic as possible we have adopted a fixed format for sample codes : two alphanumeric strings separated with an underscore "_" \
#I guarantee that the pipeline will work if you use sample codes formatted following our sample code format \
#if you have another way of formatting your sample codes it may fail (especially if you have ".", space, "," or any special character(s) in your sample codes ("-" should be avoided too as it represents gaps in sequence alignment).\
#Note that for processing NGS data with Linux is not recommended to have punctuation marks in sample codes\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 \cb9 #\cf8 Expected input filename format is as follows :\cf2  
\f1\b \cf15 XXXX_XXXX_S*_L001_R*_001.fastq.gz whatever the number of alphanumeric characters behind XXXX \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b0 \cf2 \cb1 #For example here :\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f3\fs22 \cf12 \cb14 \CocoaLigature0 #SWAR00034_0199_S100_L001_R1_001.fastq.gz   \cf3 #sample code = SWAR00034_0199; 100=sample ID on the sample sheet; forward reads (R1)\cf12 \
#SWAR00034_0199_S100_L001_R1_001.fastq.gz   \cf3 #sample code = SWAR00034_0199; 100=sample ID on the sample sheet; reverse reads (R2)
\f0\fs28 \cf12 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 \cb9 \
### Nota if needed : to convert dash "-" to underscore "_" in filenames \cf0 \
\pard\pardeftab720\sl280\partightenfactor0

\f4\fs24 \cf12 \expnd0\expndtw0\kerning0
for i in *.fastq.gz\
do \
mv $i ./"$(echo $i | sed 's/-/_/g')"\
done\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs28 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf4 #------------------------------------------------------------------------------------------------------------------------------------------------------------------\
# Example data set  \
#------------------------------------------------------------------------------------------------------------------------------------------------------------------\
\pard\pardeftab720\partightenfactor0
\cf4 \cb14 #stored in the example/ directory of the github rep.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf3 \CocoaLigature0 CEXT00001_0199   # negative control of DNA extraction
\f0\fs28 \CocoaLigature1 \

\f3\fs22 \CocoaLigature0 CPCR00001_0199   # negative control of PCR
\f0\fs28 \CocoaLigature1 \

\f3\fs22 \CocoaLigature0 EMPT00001_0199   # empty well control #01 (combination of indexes not used in the run)
\f0\fs28 \CocoaLigature1 \

\f3\fs22 \CocoaLigature0 EMPT00002_0199   # empty well control #02 (combination of indexes not used in the run)\
SWAR00034_0199   # mix of 4 specimens of 
\f5\i T. cacoeciae
\f3\i0  and 96 specimens of 
\f5\i T. evanescens 
\f3\i0 \
SWAR00035_0199   # mix of 4 specimens of 
\f5\i T. cacoeciae
\f3\i0  and 96 specimens of 
\f5\i T. evanescens 
\f3\i0 \
SWAR00073_0199   # mix of 1 specimen of 
\f5\i T. cacoeciae 
\f3\i0 3 specimens of 
\f5\i T. evanescens 
\f3\i0 and 6 specimens of 
\f5\i T. brassicae
\f3\i0 \
SWAR00077_0199   # mix of 1 specimen of 
\f5\i T. cacoeciae 
\f3\i0 4 specimens of 
\f5\i T. evanescens 
\f3\i0 and 5 specimens of 
\f5\i T. brassicae
\f3\i0  \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f0\fs28 \cf2 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf3 #NOTA : I also provide a reference database to look for potential chimeras (stored in script/referencedatabase.fas in the github rep) that is composed of the COI (FC+BR) of the strains used to create sample mixes:\

\f3\fs22 EPCO00020_0199   # 
\f5\i T. cacoeciae
\f3\i0 \
EPCO00277_0199   # 
\f5\i T. evanescens
\f3\i0 \
EPCO00395_0199   # 
\f5\i T. brassicae
\f3\i0 \
\pard\pardeftab720\sl320\partightenfactor0

\f0\fs26 \cf12 \cb1 \expnd0\expndtw0\kerning0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\fs28 \cf4 \kerning1\expnd0\expndtw0 #------------------------------------------------------------------------------------------------------------------------------------------------------------------\
# Chek if sample codes are unique and count samples\
#------------------------------------------------------------------------------------------------------------------------------------------------------------------\
\pard\pardeftab720\sl320\partightenfactor0

\fs26 \cf12 \expnd0\expndtw0\kerning0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\fs28 \cf2 \kerning1\expnd0\expndtw0 ### chek if sample codes are unique (\cf8 cmd to be adapted if you do not work with our sample code format\cf2 )
\fs26 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl320\partightenfactor0
\cf12 ls *.fastq.gz |awk -F'_' '\{print $1"_"$2\}' |sort |uniq -c |awk '\{if($1>2) \{print\}\}'   \
\pard\pardeftab720\sl320\partightenfactor0
\cf2 #you should get the prompt back if all sample codes are unique. If a sample code appears more that once it is printed on screen together with the nb of occurences\cf12 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\fs28 \cf2 \kerning1\expnd0\expndtw0 ### count samples (\cf8 cmd to be adapted if you do not work with our sample code format)
\fs26 \cf12 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl320\partightenfactor0
\cf12 ls *.fastq.gz |awk -F'_' '\{print $1"_"$2\}' |sort |uniq |wc -l \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\fs28 \cf4 \kerning1\expnd0\expndtw0 #------------------------------------------------------------------------------------------------------------------------------------------------------------------\
# Gunzip fastq.gz files\
#------------------------------------------------------------------------------------------------------------------------------------------------------------------\
\
\pard\pardeftab720\partightenfactor0
\cf8 # I voluntary do not create one script per input .fastq.gz file as you may have many samples.\
# To speed up a bit the process I create one script for R1 and another for R2\cf4 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 ### list .fastq.gz files\
#R1
\f3\fs22 \cf0 \
ls *\cf11 \cb10 \CocoaLigature0 _R1_*\cf0 \cb1 \CocoaLigature1 .fastq.gz > myR1files
\f0 \

\fs28 \cf2 #R2\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 ls *\cf11 \cb10 \CocoaLigature0 _R2_*\cf0 \cb1 \CocoaLigature1 .fastq.gz > myR2files
\f0 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf2 \
### prepare scripts \
#R1
\f3\fs24 \cf11 \cb9 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
awk 'BEGIN\{print "#!\\/bin\\/bash\\n#SBATCH -J gunzip\\n#SBATCH -p workq\\n#SBATCH -t \cf5 30:00\cf11 \\n\\n"\} \{print "\cf0 \cb1 \CocoaLigature1 gunzip "$1\cf11 \cb9 \CocoaLigature0 \}' myR1files > gunzipR1.sh\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 #R2\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs24 \cf11 \cb9 \CocoaLigature0 awk 'BEGIN\{print "#!\\/bin\\/bash\\n#SBATCH -J gunzip\\n#SBATCH -p workq\\n#SBATCH -t \cf5 30:00\cf11 \\n\\n"\} \{print "\cf0 \cb1 \CocoaLigature1 gunzip "$1\cf11 \cb9 \CocoaLigature0 \}' myR2files > gunzipR2.sh\
\pard\pardeftab720\partightenfactor0
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 ### run scripts\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs24 \cf11 \cb9 \kerning1\expnd0\expndtw0 \CocoaLigature0 sbatch gunzipR1.sh
\f0\fs28 \cf0 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 \

\f3\fs24 \cf11 \cb9 \kerning1\expnd0\expndtw0 \CocoaLigature0 sbatch gunzipR2.sh
\f0\fs28 \cf2 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
### monitor jobs\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 squeue -u "\cf5 username\cf11 "\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 ### check final status of jobs \
#the cmd will print status for all jobs for which a slurm-*.out file is present in datadir\
#If everything went fine, State should be COMPLETED.\
#if State=TIMEOUT you need to increase running time.\
#if State=FAILED, you need to check the slurm-*.out file to get details on the error\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 ls slurm-*.out |awk -F"[-.]" '\{print "seff " $2 " |grep \\042Job ID\\\\|State\\042"\}' |bash
\f0\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs24 \cf11 \cb9 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ### count outputs\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 ls *\cf12 \cb9 .fastq |wc -l \cf2 #should be equal to 2x the nb of samples\cf12  \cf11 \cb10 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cb9 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ### cleaning (once jobs are finished)\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 rm \cf11 \cb10 \CocoaLigature0 gunzip*.sh myR1files myR2files slurm-*\cf0 \cb1 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f0\fs28 \cf4 \
\
#------------------------------------------------------------------------------------------------------------------------------------------------------------------\
# Quality control of the sequencing run (FastQC)\
#------------------------------------------------------------------------------------------------------------------------------------------------------------------\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 ### concatenate all reads1 and all reads2\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf12 cat *_R1_*.fastq > allR1.fastq\
cat *_R2_*.fastq > allR2.fastq\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 ### list files\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 ls all*.fastq > myfiles
\f0 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf2 ### prepare cmd to tun FastQC \cf8 (change path to your version of FastQC. attention use a \\ in front of each /)\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs24 \cf11 \cb9 \CocoaLigature0 awk '\{print "#!\\/bin\\/bash\\n#SBATCH -J fastQC\\n#SBATCH -p workq\\n#SBATCH -t \cf12 01:00:00\cf11 \\n\\n\cf13 module load\cf11  \cf13 bioinfo\\/FastQC\\/0.12.1\cf11 \\n\cf0 \cb1 \CocoaLigature1 fastqc "$1\cf11 \cb9 \CocoaLigature0 \}' myfiles > tmp_cmd\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ### split the cmd file to run fastQC on R1 and R2 in parallel (2 scripts are created)\
\pard\pardeftab720\sl280\partightenfactor0

\f4\fs24 \cf12 \expnd0\expndtw0\kerning0
awk '/
\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 #!
\f4\fs24 \cf12 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 /\{filename="fastqc_"NR".sh"\}; \{print >filename\}' 
\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 tmp_cmd\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 ### run all scripts\
\pard\pardeftab720\partightenfactor0
\cf2 \kerning1\expnd0\expndtw0 \ul \ulc2 # copy and paste the next 4 lines together in the terminal (from "for" to "done")\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \ulnone \CocoaLigature0 for i in fastqc_*.sh\
do\
sbatch $i\
done
\f0\fs28 \cf0 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 ### monitor jobs\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 squeue -u "\cf5 username\cf11 "\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 ### check final status of jobs \
#the cmd will print status for all jobs for which a slurm-*.out file is present in datadir\
#If everything went fine, State should be COMPLETED.\
#if State=TIMEOUT you need to increase running time.\
#if State=FAILED, you need to check the slurm-*.out file to get details on the error\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 ls slurm-*.out |awk -F"[-.]" '\{print "seff " $2 " |grep \\042Job ID\\\\|State\\042"\}' |bash
\f0\fs28 \cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 \kerning1\expnd0\expndtw0 ### cleaning (once jobs are finished)\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 rm \cf11 \cb10 \CocoaLigature0 fastqc_*.sh tmp_cmd myfiles slurm-*\cf0 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 ### copy resulting html files to your computer and open with a web browser\
### the following link will help you to interpret FastQC results\
\pard\pardeftab720\partightenfactor0
\cf0 http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/\
\pard\pardeftab720\partightenfactor0
\cf2 ### record the number of PF (passing filter reads)\
### analyse profiles to make sure sequencing ran properly\
### \ul OPTIONAL \ulnone : to calculate the nb of reads with  Qc > 20, 30 etc, you need to use the fastqc.zip files\
# unzip \
# open the fastqc_data.txt file\
# search for "Per sequence quality scores"  (exact match)\
# the sum of the reads should match the nb of PF reads\
# sum over reads with QC > 20 or 30 depending on what you need\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 \cb9 ### \cf8 cleaning to save disk space !!!\cf4 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf12 rm allR1.fastq\
rm allR2.fastq
\f0\fs28 \cf4 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 \cb1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf4 \cb14 #for the example data set, html outfiles are stored in the output/ directory of the github rep.\
\cb17 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf4 \cb1 #------------------------------------------------------------------------------------------------------------------------------------------------------------------\
# Create first summary stat table and fill table with Nb of passing filter reads + distribution of read length for each sample-\
#------------------------------------------------------------------------------------------------------------------------------------------------------------------\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf4 \cb17 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 \cb1 #create script\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 nano overviewquality.sh\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f0\fs28 \cf8 #note that you must run the script on R1 and R2 (edit the script accordingly). \
#The nb of PF reads would be the same but you may have some variations for read length.
\f3\fs22 \cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 #-----------------------------------\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 \cb10 \CocoaLigature0 #!/bin/bash\
#SBATCH -J quality \
#SBATCH -p workq\
#SBATCH -t \cf5 1:00:00\cf11 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf3 #get length of reads \
\pard\pardeftab720\partightenfactor0

\fs20 \cf12 for i in *_\cf5 R1\cf12 _*.fastq\
do\
\pard\pardeftab720\sl320\partightenfactor0
\cf12 \expnd0\expndtw0\kerning0
awk '\{if (\cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 NR%2==0\cf12 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 ) \{print\}\}' $i |awk '\{if (\cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 NR%2==1\cf12 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 ) \{print length($0)\}\}' > $i".LENGTH"\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 done\
\pard\pardeftab720\partightenfactor0

\fs22 \cf3 \cb1 \CocoaLigature1 #get SumCountMeanMedianMinMax for reads \
\pard\pardeftab720\partightenfactor0
\cf12 for i in *.fastq.LENGTH\
do\cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 \cb10 \CocoaLigature0 echo $i >> $i".STAT" && cat $i |\cf13 /rootedpathtofile\cb9 /\cf12 get_SumCountMeanMedianMinMax.sh\cf13  \cf3 \cb1 \CocoaLigature1 >> \cf11 \cb10 \CocoaLigature0 $i".STAT"   \cf15 #adapt path. script in the script/ directory of the github rep\cf11 \
done\cf3 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf3 #format output files to keep only sample code and remove Sum of read length which is meaningless\
\pard\pardeftab720\partightenfactor0
\cf12 for i in *.fastq.LENGTH.STAT\
do\cf0 \
awk 'NR % 2 == 1 \{ o=$0 ; next \} \{ print o "\\t" $0 \}' $i |\cf11 \cb10 \CocoaLigature0 awk '\{split($1,table,"_") ;print table[1]"_"table[2]"\\t"$3"\\t"$4"\\t"$5"\\t"$6"\\t"$7\}' > $i".STATDEF"\cf0 \cb1 \CocoaLigature1 \
done\
\pard\pardeftab720\partightenfactor0
\cf3 #create summary file for all samples\
\pard\pardeftab720\sl320\partightenfactor0

\fs20 \cf12 \expnd0\expndtw0\kerning0
cat *\cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 .STATDEF |awk 'BEGIN\{print"samplecode\\tnPFreads\\tAverageLengthReads\\tMedianLengthReads\\tMinLengthReads\\tMaxLengthReads"\} \{print $0\}' > overview_runquality_\cf5 R1\cf3 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\fs22 \cf3 #cleaning\
\pard\pardeftab720\sl320\partightenfactor0

\fs20 \cf12 \expnd0\expndtw0\kerning0
rm *.LENGTH *.STAT *\cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 .STATDEF
\fs22 \cf0 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf0 #-----------------------------------\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 #run script\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 sbatch overviewquality.sh\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 #monitor job\
\pard\pardeftab720\partightenfactor0
\cf12 squeue -u "
\f3\fs22 \cf5 \cb10 \CocoaLigature0 username
\f0\fs28 \cf12 \cb1 \CocoaLigature1 "\
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
### check final status of job\
#the cmd will print status for all jobs for which a slurm-*.out file is present in datadir\
#If everything went fine, State should be COMPLETED.\
#if State=TIMEOUT you need to increase running time.\
#if State=FAILED, you need to check the slurm-*.out file to get details on the error\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 ls slurm-*.out |awk -F"[-.]" '\{print "seff " $2 " |grep \\042Job ID\\\\|State\\042"\}' |bash\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \kerning1\expnd0\expndtw0 #output = 
\f3\fs22 \cf11 \cb10 \CocoaLigature0 overview_runquality_\cf5 R1 \cf12 o\cf11 verview_runquality_\cf5 R2\cf0 \cb1 \CocoaLigature1 \

\f0\fs28 \cf2 #cleaning\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 rm overviewquality.sh slurm-*.out\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f0\fs28 \cf2 \
##Keep track of the nb of Passing filter reads + average R1 length + average R2 length by samples in a summary table (
\f2\b\fs22 \cf18 \cb10 \CocoaLigature0 quality_table
\f0\b0\fs28 \cf2 \cb1 \CocoaLigature1 ) that we will fill step by step with the results of the next steps \cf4 \
\pard\pardeftab720\sl320\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 for i in overview_runquality_R*\
do\
awk '\{if(NR>1) \{print $1"\\t"$2"\\t"$3\}\}' $i |sort > $i"_sorted"\
done\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
join -t 
\f0\fs26 \cf19 \cb9 \expnd0\expndtw0\kerning0
\CocoaLigature1 $'\\t'
\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0  -a 1 -e "NA" -o 1.1,1.2,1.3,2.3 overview_runquality_\cf12 R1\cf11 _sorted\cf12  \cf11 overview_runquality_\cf12 R2\cf11 _sorted\cf12  \cf11 > tmp_quality_table
\f0\fs28 \cf4 \cb1 \CocoaLigature1 \
\

\f3\fs22 \cf11 \cb10 \CocoaLigature0 awk 'BEGIN\{print "samplecode\\tnPFpairedReads\\tAverageLengthPFR1\\tAverageLengthPFR2"\} \{print $0\}' tmp_quality_table > 
\f2\b \cf18 quality_table
\f0\b0\fs28 \cf4 \cb1 \CocoaLigature1 \
\
\pard\pardeftab720\sl320\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 rm *_sorted tmp_quality_table
\f0\fs28 \cf4 \cb1 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf4 #----------------------------
\f1\b \cf4 END : \cf2 Nb of passing filter reads + distribution of read length for each sample
\f0\b0 \cf4 ----------------------------------#\
\
\pard\pardeftab720\partightenfactor0
\cf2 ### summary of current output files after the quality control step/\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode_R*.fastq : raw paired reads\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\b \cf18 quality_table 
\f3\b0 \cf11 : current version of the follow up table including statistics to be opened in excel (field separator = tab)
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf4 \cb17 \
\cb14 #expected output for the example data set\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \CocoaLigature0 more quality_table 
\f0\fs28 \cf4 \CocoaLigature1 \

\f3\fs22 \cf11 \CocoaLigature0 samplecode	nPFpairedReads	AverageLengthPFR1	AverageLengthPFR2\
CEXT00001_0199	1468	73.0886	64.2929\
CPCR00001_0199	160	70.0062	61.0688\
EMPT00001_0199	0	NA	NA\
EMPT00002_0199	0	NA	NA\
SWAR00034_0199	11139	247.765	248.012\
SWAR00035_0199	15045	240.817	240.663\
SWAR00073_0199	11109	225.704	225.411\
SWAR00077_0199	12017	244.008	243.888\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs28 \cf4 \cb1 \CocoaLigature1 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf4 #------------------------------------------------------------------------------------------------------------------------------------------------------------------\
# Trimmomatic : adapter trimming + selection of good quality paired reads\
#------------------------------------------------------------------------------------------------------------------------------------------------------------------\
\pard\pardeftab720\partightenfactor0
\cf8 ###You need to create your own "adapter file"\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf8 \cb10 \CocoaLigature0 #Our sequencing adapters are in the file adapters.fa provided with the pipeline (script/ directory)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 ### create sample list\
\pard\pardeftab720\sl320\partightenfactor0

\fs26 \cf12 ls *.fastq |awk -F'_' '\{print $1"_"$2\}' |sort |uniq > mysamples
\fs28 \cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 \
### create script \cf8 \kerning1\expnd0\expndtw0 (change path to your version of Trimmomatic. attention use a \\ in front of each /  && change path to your adapters.fa file)\cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf3 \kerning1\expnd0\expndtw0 #I voluntary do not create one script per input R1+R2  file as you may have many samples.\
\pard\pardeftab720\partightenfactor0
\cf8 #note that you should set 
\f3\fs22 \cf5 \cb10 \CocoaLigature0 MINLEN\cf11  
\f0\fs28 \cf8 \cb1 \CocoaLigature1 to a value that is compatible with your read length + the size of your sequencing products (forwardprimer----amplicon------reverseprimer)\
\pard\pardeftab720\partightenfactor0
\cf3 #you may run trimmomatic with different value of\cf8  
\f3\fs22 \cf5 \cb10 \CocoaLigature0 MINLEN 
\f0\fs28 \cf8 \cb1 \CocoaLigature1 a\cf3 nd test if results are changing or not (note that you should go at least to the FLASH step to figure out if it impacts the results)\cf0 \expnd0\expndtw0\kerning0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb9 \kerning1\expnd0\expndtw0 \CocoaLigature0 awk 'BEGIN\{print "#!\\/bin\\/bash\\n#SBATCH -J trimmomatic \\n#SBATCH -p \cf5 workq\cf11 \\n#SBATCH -t \cf5 2:00:00\cf11 \\n#SBATCH --cpus-per-task=
\f2\b \cf5 2
\f3\b0 \cf11 \\n#SBATCH --mem-per-cpu=\cf5 4\cf11 G\\n\\n\cb10 module load \cf13 \cb1 bioinfo\\/Trimmomatic\\/0.39\cf11 \cb9 \\n"\} \{print "\cb10 java -jar \\$TRIM_HOME\\/trimmomatic.jar PE -phred33\cb9  "$1"_*\cf5 _R1_001.fastq\cf12  "$1"\cf11 _*\cf5 _R2_001.fastq\cf12  "$1"_R1_paired.fastq.gz "$1"_R1_unpaired.fastq.gz "$1"_R2_paired.fastq.gz "$1"_R2_unpaired.fastq.gz\cf5  \cf11 \cb10 ILLUMINACLIP:\cf5 \\\cf13 /rootedpathtofile\cb9 \\\cf5 \cb10 /adapters.fa\cf11 :2:30:10:8:true LEADING:\cf5 20\cf11  TRAILING:\cf5 20\cf11  SLIDINGWINDOW:4:\cf5 20\cf11  MINLEN:\cf5 200\cf11 \cb9 "\}' 
\f0\fs26 \cf12 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 mysamples
\f3\fs22 \cf11 \cb9 \kerning1\expnd0\expndtw0 \CocoaLigature0  > trimmomatic.sh   \cf3 \cb10 #note : usually I set quality parameters to 20 [below 20 = 1% error rate]\cf11 \cb9 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf7 #note on parameters:\
# by default, the parameters in the script will : \
# Remove adapters \
# Remove leading bases below quality 20 (LEADING:20) \
# Remove trailing bases below quality 20 (TRAILING:20)\
# Scan the read with a 4-base wide sliding window, cutting when the average quality per base drops below 20 (SLIDINGWINDOW:4:20) \
# Drop reads below 200 bases long (MINLEN:200) \
\pard\pardeftab720\partightenfactor0

\fs28 \cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
### run script\cf0 \
\pard\pardeftab720\sl280\partightenfactor0

\f4\fs24 \cf12 sbatch
\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0  
\f4\fs24 \cf12 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 trimmomatic
\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 .sh\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 ###  \kerning1\expnd0\expndtw0 monitor job\
\pard\pardeftab720\partightenfactor0
\cf12 squeue -u "
\f3\fs22 \cf5 \cb10 \CocoaLigature0 username
\f0\fs28 \cf12 \cb1 \CocoaLigature1 "\
\
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
### check final status of job \
#the cmd will print status for all jobs for which a slurm-*.out file is present in datadir\
#If everything went fine, State should be COMPLETED.\
#if State=TIMEOUT you need to increase running time.\
#if State=FAILED, you need to check the slurm-*.out file to get details on the error\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 ls slurm-*.out |awk -F"[-.]" '\{print "seff " $2 " |grep \\042Job ID\\\\|State\\042"\}' |bash
\f0\fs28 \cf2 \
\pard\pardeftab720\partightenfactor0
\cf12 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\partightenfactor0
\cf2 ### outputs = \
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode_\cf12 \cb9 R1_paired.fastq.gz    \cf2 #good quality R1 for which a good quality R2 was found\cf11 \cb10 \
$samplecode_\cf12 \cb9 R2_paired.fastq.gz    \cf2 #good quality R2 for which a good quality R1 was found \cf11 \cb10 \
$samplecode_\cf12 \cb9 R1_unpaired.fastq.gz  \cf2 #good quality R1 for which a good quality R2 was NOT found\cf11 \cb10 \
$samplecode_\cf12 \cb9 R2_unpaired.fastq.gz  \cf2 #good quality R2 for which a good quality R1 was NOT found\cf11 \cb10 \
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ### count outputs =
\f3\fs22 \cf11 \cb10 \CocoaLigature0 \
ls *_\cf12 \cb9 R1_paired.fastq.gz |wc -l \cf2 #should be equal to the nb of samples\cf12  \cf11 \cb10 \
ls *_\cf12 \cb9 R2_paired.fastq.gz |wc -l \cf2 #should be equal to the nb of samples\cf11 \cb10 \
ls *_\cf12 \cb9 R1_unpaired.fastq.gz |wc -l \cf2 #should be equal to the nb of samples\cf11 \cb10 \
ls *_\cf12 \cb9 R2_unpaired.fastq.gz |wc -l \cf2 #should be equal to the nb of samples\
\pard\pardeftab720\partightenfactor0
\cf11 \cb10 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 ### summary statistics\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 grep "phred\\|Input" slurm-* |awk '\{ if($0~/phred/) \{print $2\} else print $4"\\t"$7"\\t"$12"\\t"$17"\\t"$20\}' |awk 'NR % 2 == 1 \{ o=$0 ; next \} \{ print o "\\t" $0 \}' |sed s/"_R1_001.fastq"/""/g |awk 'BEGIN\{print "samplecode\\tnPFpairedreads\\tR1R2ok\\tR1onlyok\\tR2onlyok\\tR1R2dropped"\} \{print $0\}' > trimmomatic_results\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 ### take a look to statistics to adjust parameters if you wish\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf12 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 more \cf11 trimmomatic_results\
\pard\pardeftab720\partightenfactor0

\fs20 \cf20 \cb21 \expnd0\expndtw0\kerning0
\CocoaLigature1 #meaning of columns:\
nPFpairedreads <=> Nb of pairs of R1R2 that passed Illumina Quality control (PF = Passing Filter)\
R1R2ok <=> Both Surviving: Nb of pairs of R1+R2 for which both reads R1 and R2 survived trimming (met all criteria you selected)\
R1onlyok <=> Forward Only Surviving: Nb of pairs of R1+R2 for which only R1 read was kept (R2 failed to pass one or more selection criteria after being trimmed)\
R2onlyok <=> Reverse Only Surviving: Nb of pairs of R1+R2 for which only R2 read was kept (R1 failed to pass one or more selection criteria after being trimmed)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf20 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 R1R2dropped\cb21 \expnd0\expndtw0\kerning0
\CocoaLigature1  <=> Dropped: Nb of pairs of R1+R2 that were removed. Neither R1/R2 satisfied selection criteria and pairs were entirely removed\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f0\fs28 \cf4 \cb14 \CocoaLigature1 #expected output for the example data set\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf12 \CocoaLigature0 more \cf11 trimmomatic_results\
samplecode	nPFpairedreads	R1R2ok	R1onlyok	R2onlyok	R1R2dropped\
CEXT00001_0199_S63_L001	1468	8	5	1	1454\
CPCR00001_0199_S64_L001	160	0	0	0	160\
EMPT00001_0199_S19_L001	0	0	0	0	0\
EMPT00002_0199_S102_L001	0	0	0	0	0\
SWAR00034_0199_S100_L001	11139	7008	2090	658	1383\
SWAR00035_0199_S34_L001	15045	8581	3326	499	2639\
SWAR00073_0199_S3_L001	11109	5389	2725	180	2815\
SWAR00077_0199_S65_L001	12017	7000	2846	501	1670\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
### cleaning \
#delete useless files
\f3\fs22 \cf5 \cb9 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 rm \cb10 trimmomatic.sh slurm-*.out\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 #delete unpaired reads\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 rm *_\cf12 unpaired.fastq.gz    \cf8 #I do not pay attention to unpaired reads for now. I consider that it is safer to used paired reads.
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf4 #------------------------------------------------------------------------------------------------------------------------------------------------------------------\
#trash original raw reads to keep space \
#------------------------------------------------------------------------------------------------------------------------------------------------------------------\
\pard\pardeftab720\partightenfactor0

\f1\b \cf10 \cb8 \CocoaLigature0 #REMEMBER / YOU MUST STORE YOUR RAW DATA ELSEWHERE !!!
\f0\b0 \cf2 \cb1 \CocoaLigature1 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb9 \CocoaLigature0 rm *.fastq\cb10 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf4 #------------------------------------------------------------------------------------------------------------------------------------------------------------------\
#gunzip paired fastq.gz files generated by trimmomatic\
#------------------------------------------------------------------------------------------------------------------------------------------------------------------\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 ### list .fastq.gz files\
# R1\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 ls *\cf5 R1\cb10 \CocoaLigature0 _paired.fastq.gz\cf0 \cb1 \CocoaLigature1  > myR1files\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 # R1\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 ls *\cf5 R2\cb10 \CocoaLigature0 _paired.fastq.gz\cf0 \cb1 \CocoaLigature1  > myR2files
\f0 \
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf2 ### prepare scripts\
# R1
\f3\fs24 \cf11 \cb9 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
awk 'BEGIN\{print "#!\\/bin\\/bash\\n#SBATCH -J gunzip\\n#SBATCH -p workq\\n#SBATCH -t \cf5 30:00\cf11 \\n\\n"\} \{print "\cf0 \cb1 \CocoaLigature1 gunzip "$1\cf11 \cb9 \CocoaLigature0 \}' myR1files > gunzipR1.sh\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 # R2\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs24 \cf11 \cb9 \CocoaLigature0 awk 'BEGIN\{print "#!\\/bin\\/bash\\n#SBATCH -J gunzip\\n#SBATCH -p workq\\n#SBATCH -t \cf5 30:00\cf11 \\n\\n"\} \{print "\cf0 \cb1 \CocoaLigature1 gunzip "$1\cf11 \cb9 \CocoaLigature0 \}' myR2files > gunzipR2.sh\
\pard\pardeftab720\partightenfactor0
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 ### run scripts\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs24 \cf11 \cb9 \kerning1\expnd0\expndtw0 \CocoaLigature0 sbatch gunzipR1.sh
\f0\fs28 \cf0 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 \

\f3\fs24 \cf11 \cb9 \kerning1\expnd0\expndtw0 \CocoaLigature0 sbatch gunzipR2.sh
\f0\fs28 \cf2 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 ### monitor jobs\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 squeue -u "\cf5 username\cf11 "\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 ### check final status of jobs \
#the cmd will print status for all jobs for which a slurm-*.out file is present in datadir\
#If everything went fine, State should be COMPLETED.\
#if State=TIMEOUT you need to increase running time.\
#if State=FAILED, you need to check the slurm-*.out file to get details on the error\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 ls slurm-*.out |awk -F"[-.]" '\{print "seff " $2 " |grep \\042Job ID\\\\|State\\042"\}' |bash
\f0\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ### count outputs\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 ls *\cf12 \cb9 .fastq |wc -l \cf2 #should be equal to 2x the nb of samples\cf12  \cf11 \cb10 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cb9 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ### cleaning (once job are finished)\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 rm \cf11 \cb10 \CocoaLigature0 gunzip*.sh myR1files myR2files slurm-*\cf0 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \
\pard\pardeftab720\partightenfactor0
\cf4 #------------------------------------------------------------------------------------------------------------\
#merge of overlapping reads with FLASH\
#------------------------------------------------------------------------------------------------------------\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 #Here we will merge each pair of R1xR2 read\
R1      ------------------\
R2                     ------------------\
result  ------------------------------ \
\
\
### create a big cmd file \cf8 (change path to your version of FLASH. attention use a \\ in front of each /)\cf2 \
\pard\pardeftab720\partightenfactor0
\cf8 # I voluntary do not create one script per input R1+R2  file as you may have many samples. In addition this will make the computation of statistics more straighforward\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs24 \cf11 \cb9 \CocoaLigature0 awk 'BEGIN\{print "#!\\/bin\\/bash\\n#SBATCH -J flash\\n#SBATCH -p workq\\n#SBATCH -t \cf5 2:00:00\cf11 \\n\\n
\fs22 \cf13 \cb10 module load bioinfo\\/FLASH\\/1.2.11\cf11 \\n"\} \{print "flash -x \cf5 0\cf11  -m \cf5 10\cf11  -M \cf5 300\cf11  -d fastq_merge -o
\fs24 \cf0 \cb1 \CocoaLigature1  "$1"
\fs22 \cf11 \cb10 \CocoaLigature0  "$1"_R1_paired.fastq "$1"_R2_paired.fastq"
\fs24 \cb9 \}' 
\f0\fs26 \cf12 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 mysamples
\f3\fs24 \cf11 \cb9 \kerning1\expnd0\expndtw0 \CocoaLigature0  > flash.sh
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf22 #details on parameters:\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f3\fs22 \cf23 \cb10 \CocoaLigature0 #-x, --max-mismatch-density : Maximum allowed ratio between the number of mismatched base pairs and the overlap length.\
#-m, --min-overlap: minimum required overlap length (bp)\
#-M, --max-overlap : Maximum overlap length expected in approximately 90% of read pairs\
#-d, --output-directory : output directory\
#-o, --output-prefix : Prefix of output files
\f0\fs28 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
### run script\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 sbatch 
\fs24 \cb9 flash.sh
\fs22 \cb10 \
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ### monitor job\
\pard\pardeftab720\partightenfactor0
\cf12 squeue -u "
\f3\fs22 \cf5 \cb10 \CocoaLigature0 username
\f0\fs28 \cf12 \cb1 \CocoaLigature1 "\
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
### check final status of jobs \
#the cmd will print status for all jobs for which a slurm-*.out file is present in datadir\
#If everything went fine, State should be COMPLETED.\
#if State=TIMEOUT you need to increase running time.\
#if State=FAILED, you need to check the slurm-*.out file to get details on the error\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 ls slurm-*.out |awk -F"[-.]" '\{print "seff " $2 " |grep \\042Job ID\\\\|State\\042"\}' |bash
\f0\fs28 \cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 \kerning1\expnd0\expndtw0 \
### store FLASH log file\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 mv slurm-\cf13 \cb1 XXXXXX\cf11 .out\cb10  ./flash.log  \cf3 #change \cf13 \cb1 XXXXXX \cf3 \cb10 to your job number\cf11 \
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ### take a look to statistics to adjust parameters if needed\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 grep "R1_paired\\|Total pairs\\|Percent combined" flash.log |sed 'N;N;s/\\n/ /g'
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
### cleaning\
\pard\pardeftab720\sl280\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 rm 
\f4\fs24 \cf12 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 flash
\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 .sh
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
### format statistics in a summary table that will be merged with results obtained in the next steps of the workflow \
\pard\pardeftab720\partightenfactor0

\f2\b\fs22 \cf8 \cb10 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\b0 \cf11 grep "_R1_paired.fastq" flash\cf12 .log\cf11  |sed s/"\\[FLASH\\]     "//g |sed s/_R1_paired\\.fastq//g > tmp_table_sample\
grep "Total pairs:" flash\cf12 .log\cf11  |sed s/"\\[FLASH\\]     Total pairs:      "//g > tmp_table_cleanreads\
grep "Combined pairs:" flash\cf12 .log\cf11  |sed s/"\\[FLASH\\]     Combined pairs:   "//g > tmp_table_mergedreads\
\
paste tmp_table_sample tmp_table_cleanreads tmp_table_mergedreads > \cf12 flash_results\cf18   \cf2 #headers = col1=samplecode/ col2=nbcleanpairedreads(output trimmomatic)/ col3=nbmergedreads (output FLASH)\cf11 \
\
rm tmp_table*\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ### Add results of the FLASH step to the previous version of the summary table (
\f2\b\fs22 \cf18 \cb10 \CocoaLigature0 quality_table
\f0\b0\fs28 \cf2 \cb1 \CocoaLigature1 ) that we will continue to fill step by step with the results of the next steps \cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 # sort files
\f3\fs22 \cf12 \cb10 \CocoaLigature0 \
awk '\{if(NR>1) \{print\}\}' quality_table |sort > quality_table_sorted\
sort flash_results > flash_results_sorted\

\f0\fs28 \cf2 \cb1 \CocoaLigature1 # join files\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 join -t 
\f0\fs26 \cf19 \cb9 \expnd0\expndtw0\kerning0
\CocoaLigature1 $'\\t'
\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0  -a 1 -e "NA" -o 1.1,1.2,1.3,1.4,2.2,2.3 \cf12 quality_table_sorted flash_results_sorted > tmp_flash_table\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 awk 'BEGIN\{print "samplecode\\tnPFpairedReads\\tAverageLengthPFR1\\tAverageLengthPFR2\\tncleanPFpairedReads_Trimmomatic\\tnmergedPFreads_FLASH"\} \{print $0\}' tmp_flash_table > 
\f2\b \cf18 flash_table
\f3\b0 \cf2 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 # cleaning\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 \cb10 \CocoaLigature0 rm *_sorted tmp_flash_table\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 # check results\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 more 
\f2\b \cf18 flash_table
\f0\b0\fs28 \cf4 \cb1 \CocoaLigature1 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf4 \cb14 #expected output for the example data set\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \CocoaLigature0 more flash_table\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf12 samplecode	nPFpairedReads	AverageLengthPFR1	AverageLengthPFR2	ncleanPFpairedReads_Trimmomatic	nmergedPFreads_FLASH\
CEXT00001_0199	1468	73.0886	64.2929	8	7\
CPCR00001_0199	160	70.0062	61.0688	0	0\
EMPT00001_0199	0	NA	NA	0	0\
EMPT00002_0199	0	NA	NA	0	0\
SWAR00034_0199	11139	247.765	248.012	7008	5917\
SWAR00035_0199	15045	240.817	240.663	8581	6835\
SWAR00073_0199	11109	225.704	225.411	5389	4591\
SWAR00077_0199	12017	244.008	243.888	7000	5859\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f0\fs28 \cf4 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 ### cleaning\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 rm \cf11 \cb10 \CocoaLigature0 *.fastq
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf4 \
\pard\pardeftab720\partightenfactor0
\cf2 ### output files of FLASH are stored in a directory called\cf0  
\f3\fs22 fastq_merge
\f0\fs28  \cf2 that is created in datadir\cf0 \
\cf2 ### the merged reads are stored in\cf0  
\fs22 $samplecode.extendedFrags.fastq
\fs28  \cf2 (e.g.: 
\f3\fs22 \cf5 SWAR00034_0199\cf0 .extendedFrags.fastq
\f0\fs28 \cf2 )\cf0 \
\cf2 \
\
### summary of current useful output files\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 fastq_merge/$samplecode.extendedFrags.fastq : paired reads merged with FLASH (fastq)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f2\b \cf18 flash_table 
\f3\b0 \cf11 : current version of the follow up table including statistics to be opened in excel (field separator = tab)
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\
\pard\pardeftab720\partightenfactor0
\cf4 #------------------------------------------------------------------------------------------------------------\
#Keep only full length amplicon\
#------------------------------------------------------------------------------------------------------------\
\pard\pardeftab720\partightenfactor0

\f2\b\fs22 \cf8 \cb10 \CocoaLigature0 \
#Here I keep only full length amplicons by flagging sequences that start and end with complete primers\
#I use the word "full length amplicon" for the following construction: (ie the sequencing product) ForwardPrimer----target gene-----ReversePrimer\
\
\pard\pardeftab720\partightenfactor0

\fs24 \cf21 \cb8 #Importantly, I am looking for exact matches between the sequence of the primers and the beginning / end of the sequencing product.
\fs22 \cf8 \cb10 \

\fs24 \cf21 \cb8 #I want to stay on the safest side so I \cb8 \ul \ulc2 DO NOT\cb8 \ulnone  allow mismatches.
\fs22 \cf8 \cb10 \
\
\pard\pardeftab720\partightenfactor0

\f0\b0\fs28 \cf2 \cb1 \CocoaLigature1 ### cd to datadir\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 cd fastq_merge\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 ### remove useless files to keep space\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 rm *.hist *.histogram *.notCombined_*   \cf3 #I stay on the safest side I do not keep reads that were not merged by FLASH\cf0 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf0 \
\pard\pardeftab720\partightenfactor0

\f2\b\fs24 \cf21 \cb8 \CocoaLigature0 #Note that from here until the end of the workflow we will work separately on each gene region (ie COIBR and COIFC should be analysed separately)\cf8 \cb10 \
\pard\pardeftab720\partightenfactor0
\cf21 \cb8 \CocoaLigature1 #once you have finished a step for a gene region you can perform the same step on a another gene region; but pay attention to edit scripts and cmds accordingly\
\
\pard\pardeftab720\partightenfactor0
\cf21 \CocoaLigature0 #I will take the example of \cf5 \cb9 COIBR
\f0\b0 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 ### list input files (<=> reads merged with FLASH)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 ls *.extendedFrags.fastq > myinpufiles
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0
\cf21 \cb8 ###If you are not using the same COIFC or COIBR primers as those we are using you need to create your own "primer file" with all possible combinations of linker-forward x linker-reverse primers \
###If you are using the COIFC or COIBR  primers as those we are using ; combinations are in the 
\f3\fs22 \cb8 \CocoaLigature0 COIFC.txt and COIBR.txt
\f0\fs28 \cb8 \CocoaLigature1  files stored in the script/ directory for the github rep.\
###the bash script (
\f3\fs22 \cb8 \CocoaLigature0 mineamplicon_morethan1000.sh
\f0\fs28 \cb8 \CocoaLigature1 ) called by the SLURM script is also provided in the script/ directory of the github rep\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \
### split the file that list combinations of forward x reverse primers into x files of 1000 lines each\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 split -l 1000 \cf5 COIBR\cf11 .txt \cf5 COIBR\cf11 _split       
\f0\fs28 \cf2 \cb1 \CocoaLigature1 #x files 
\f3\fs22 \cf5 \cb10 \CocoaLigature0 COIBR\cf11 _splitaa , \cf5 COIBR\cf11 _splitab , \cf5 COIBR\cf11 _splitac 
\f0\fs28 \cf2 \cb1 \CocoaLigature1 etc are created
\f3\fs22 \cf11 \cb10 \CocoaLigature0  
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 ### create and execute a first script to generate a SLURM script that contains a list of scripts that themselves contain all cmds required to flag sequences that start with the forward primer and end with the reverse primers\
#note that we cannot directly include the cmds in the slurm script because it will result in a submission failure for too large bash script\
#the script takes as input, the list of files that contains merged reads (
\f3\fs22 \cf11 \cb10 \CocoaLigature0 myinpufiles) 
\f0\fs28 \cf2 \cb1 \CocoaLigature1 + the files that contain all possible combination of forward+reverse primers (
\f3\fs22 \cf5 \cb10 \CocoaLigature0 COIBR\cf11 _splitaa 
\f0\fs28 \cf2 \cb1 \CocoaLigature1 to 
\f3\fs22 \cf11 \cb10 \CocoaLigature0  \cf5 COIBR\cf11 _splitzz
\f0\fs28 \cf2 \cb1 \CocoaLigature1 ) + the list of sample codes (
\f3\fs22 \cf11 \cb10 \CocoaLigature0 ../mysamples
\f0\fs28 \cf2 \cb1 \CocoaLigature1 )  + a suffix that will be used to annotate output sequence files (here the script will automatically use 
\f3\fs22 \cf5 \cb10 \CocoaLigature0 COIBR\cf11 _splitaa 
\f0\fs28 \cf2 \cb1 \CocoaLigature1 to 
\f3\fs22 \cf11 \cb10 \CocoaLigature0  \cf5 COIBR\cf11 _splitzz
\f0\fs28 \cf2 \cb1 \CocoaLigature1  as suffix) \
#the script will output a SLURM scripts 
\f3\fs22 \cf11 \cb10 \CocoaLigature0 run_\cf5 COIBR\cf11 _mineamplicon.sh\cf12  
\f0\fs28 \cf2 \cb1 \CocoaLigature1 that needs to be run to grep full length amplicons in all files as well as all  
\f3\fs22 \cf5 \cb10 \CocoaLigature0 COIBR\cf11 _split*_mineamplicon.sh 
\f0\fs28 \cf2 \cb1 \CocoaLigature1 scripts that are called by the slurm script\
#Note that the script 
\f3\fs22 \cf12 \cb10 \CocoaLigature0 mineamplicon\cf11 _morethan1000\cf12 .sh 
\f0\fs28 \cf2 \cb1 \CocoaLigature1 will print in the slurm-* file the different input parameters as a reminder\cf12 \
\cf2 #create script\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 nano \cf12 mineamplicon.sh
\f0\fs28 \cf0 \cb1 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf0 #-----------------------------------\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 \cb10 \CocoaLigature0 #!/bin/bash\
#SBATCH -J \cf12 mineamplicon\cf11 \
#SBATCH -p workq\
#SBATCH -t \cf5 2:00:00\cf11 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf2 \cb10 \CocoaLigature0 #create cmds
\f0\fs28 \cb1 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 for i in \cf5 COIBR\cf11 _split*\
do\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf13 /rootedpathtofile\cb9 /\cf12 \cb10 mineamplicon\cf11 _morethan1000\cf12 .sh \cf11 myinpufiles \cf12 $i\cf11  ../mysamples \cf12 $i\cf5 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 done\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 #list all cmds\cf11 \
ls \cf5 COIBR\cf11 _split*_mineamplicon.sh > allscripts\
\cf2 #create SLURM script with all cmds \cf8 [Attention; this step can take time, depending on the nb of samples and the nb of sequences you have for each sample]\cf11 \
awk 'BEGIN\{print "#!\\/bin\\/bash\\n#SBATCH -J mineamplic\\n#SBATCH -p workq\\n#SBATCH -t \cf5 1-00:00:00\cf11 \\n\\n"\} \{print "\\.\\/"$0\}' allscripts > run_\cf5 COIBR\cf11 _mineamplicon.sh\
\cf2 #cleaning\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 rm allscripts\cf0 \cb1 \CocoaLigature1 \
#-----------------------------------
\f0\fs28 \cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 #run script
\f3\fs22 \cf12 \cb10 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf12 sbatch mineamplicon.sh 
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 monitor job\
\pard\pardeftab720\partightenfactor0
\cf12 squeue -u "
\f3\fs22 \cf5 \cb10 \CocoaLigature0 username
\f0\fs28 \cf12 \cb1 \CocoaLigature1 "   \
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
### check final status of jobs \
#the cmd will print status for all jobs for which a slurm-*.out file is present in datadir\
#If everything went fine, State should be COMPLETED.\
#if State=TIMEOUT you need to increase running time.\
#if State=FAILED, you need to check the slurm-*.out file to get details on the error\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 ls slurm-*.out |awk -F"[-.]" '\{print "seff " $2 " |grep \\042Job ID\\\\|State\\042"\}' |bash\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \kerning1\expnd0\expndtw0 #check outputs\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 #the output SLURM script will be 
\f3\fs22 \cf11 \cb10 \CocoaLigature0 run_\cf5 COIBR\cf11 _mineamplicon.sh\

\f0\fs28 \cf2 \cb1 \CocoaLigature1 #the script called by the SLURM script are 
\f3\fs22 \cf5 \cb10 \CocoaLigature0 COIBR\cf11 _split*_mineamplicon.sh
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 ### cleaning\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 rm mineamplicon.sh slurm-*.out\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
###execute the SLURM script that was generated in the previous step to grep full length amplicons\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 sbatch run_\cf5 COIBR\cf11 _mineamplicon.sh\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ### monitor job\
\pard\pardeftab720\partightenfactor0
\cf12 squeue -u "
\f3\fs22 \cf5 \cb10 \CocoaLigature0 username
\f0\fs28 \cf12 \cb1 \CocoaLigature1 "  \
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
### check final status of job \
#the cmd will print status for all jobs for which a slurm-*.out file is present in datadir\
#If everything went fine, State should be COMPLETED.\
#if State=TIMEOUT you need to increase running time.\
#if State=FAILED, you need to check the slurm-*.out file to get details on the error\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 ls slurm-*.out |awk -F"[-.]" '\{print "seff " $2 " |grep \\042Job ID\\\\|State\\042"\}' |bash\
\pard\pardeftab720\partightenfactor0

\f2\b \cf8 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 #note that scripts can endup with a FAILED (exit code=1) status even if everything went right.\
#It is because you may have processed empty files (which is fine) and bash returns an error in that specific case. \
#Nevertheless, it is safer to check that you have at least some non empty files as output to be sure that the script really worked on your data.\
\pard\pardeftab720\partightenfactor0

\f0\b0\fs28 \cf2 \cb1 \CocoaLigature1 ### count 
\f1\b \ul empty
\f0\b0 \ulnone  outputs to make sure you have at least some non empty files (ie that the script worked)
\f3\fs22 \cb9 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 \cb10 for file in *_\cf5 COIBR\cf11 _split*; do if [[ ! -s $file ]]; then echo $file; fi; done |wc -l   #\cf2 \cb9 (FYI : for \cf5 \cb10 COIFC \cf2 \cb9 the total nb of expected files empty or not should be 9x nb samples and for \cf5 \cb10 COIBR \cf2 \cb9 it should be 31x nb samples)
\f0\fs28 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 ### note that, for each sample, as many outputs as the nb of 
\f3\fs22 \cf5 \cb10 \CocoaLigature0 COIBR\cf11 _split*_mineamplicon.sh 
\f0\fs28 \cf2 \cb1 \CocoaLigature1 files are created. output file names = 
\f3\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode_\cf5 COIBR\cf11 _split*\

\f0\fs28 \cf2 \cb1 \CocoaLigature1 #count output 
\f3\fs22 \cf11 \cb10 \CocoaLigature0 \
ls *_\cf5 COIBR\cf11 _split*\cf5  \cf11 |wc -l \cf2 \cb9 #should be equal to the nb of samples x the nb of \cf5 \cb10 COIBR\cf11 _split*_mineamplicon.sh \cf2 \cb9 files (FYI : for \cf5 \cb10 COIFC \cf2 \cb9 it should be 9x nb samples and for \cf5 \cb10 COIBR \cf2 \cb9 it should be 31x nb samples)
\f0\fs28 \cb1 \CocoaLigature1 \
### cleaning\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 rm slurm-*.out\cf5 \
\cf11 rm *_mineamplicon.sh\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
###For each sample; concatenation of all 
\f3\fs22 \cf11 \cb10 \CocoaLigature0 *_\cf5 COIBR\cf11 _split* 
\f0\fs28 \cf2 \cb1 \CocoaLigature1 in a single file\
#create script
\f3\fs22 \cf11 \cb10 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
nano \cf12 concat.sh
\f0\fs28 \cf0 \cb1 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf0 #-----------------------------------\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 \cb10 \CocoaLigature0 #!/bin/bash\
#SBATCH -J \cf12 concat\cf11 \
#SBATCH -p workq\
#SBATCH -t \cf5 20:00\cf11 \
\pard\pardeftab720\partightenfactor0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
awk '\{print "cat "$0"_\cf5 COIBR\cf11 _split* > "$0"_\cf5 COIBR\cf11 "\}' ../mysamples |bash\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf0 \cb1 \CocoaLigature1 #-----------------------------------\cf11 \cb10 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 #run script
\f3\fs22 \cf12 \cb10 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf12 sbatch concat.sh
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 monitor job\
\pard\pardeftab720\partightenfactor0
\cf12 squeue -u "
\f3\fs22 \cf5 \cb10 \CocoaLigature0 username
\f0\fs28 \cf12 \cb1 \CocoaLigature1 " \
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
### check final status of job\
#the cmd will print status for all jobs for which a slurm-*.out file is present in datadir\
#If everything went fine, State should be COMPLETED.\
#if State=TIMEOUT you need to increase running time.\
#if State=FAILED, you need to check the slurm-*.out file to get details on the error\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 ls slurm-*.out |awk -F"[-.]" '\{print "seff " $2 " |grep \\042Job ID\\\\|State\\042"\}' |bash\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \kerning1\expnd0\expndtw0 ### count outputs = 
\f3\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode_\cf5 COIBR\cf11  
\f0\fs28 \cf2 \cb1 \CocoaLigature1 files\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 ls *_\cf5 COIBR \cf11 |wc -l \cf2 \cb9 #should be equal to the nb of samples\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ### cleaning\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 rm slurm-*.out\cf5 \
\cf11 rm \cf12 concat.sh\
\cf11 rm *_\cf5 COIBR\cf11 _split*\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\
\
### get statistics (nb of sequences that were retained as full amplicons)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 for i in *_\cf5 COIBR
\f4\fs24 \cf12 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
do\
echo $i >> tmp_
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 COIBR\cf12 _amplicon_results && grep -c "@" $i 
\f4\fs24 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 >> tmp_
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 COIBR\cf12 _amplicon_results\cf11 \
done\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 awk 'NR % 2 == 1 \{ o=$0 ; next \} \{ print o "\\t" $0 \}' 
\f4\fs24 \cf12 \expnd0\expndtw0\kerning0
tmp_
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 COIBR\cf12 _amplicon_results > \cf5 COIBR\cf12 _amplicon_results
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\
\pard\pardeftab720\partightenfactor0

\f4\fs24 \cf12 \expnd0\expndtw0\kerning0
rm tmp_
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 COIBR\cf12 _amplicon_results
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
#check results\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 \cb10 \CocoaLigature0 more \cf5 COIBR\cf12 _amplicon_results
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf4 \cb14 #expected output for the example data set\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \CocoaLigature0 more \cf5 COIBR\cf12 _amplicon_results\cf11 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
CEXT00001_0199_COIBR	0\
CPCR00001_0199_COIBR	0\
EMPT00001_0199_COIBR	0\
EMPT00002_0199_COIBR	0\
SWAR00034_0199_COIBR	2952\
SWAR00035_0199_COIBR	6093\
SWAR00073_0199_COIBR	2212\
SWAR00077_0199_COIBR	4646\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb14 \CocoaLigature0 more \cf5 COIFC\cf12 _amplicon_results\cf11 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
CEXT00001_0199_COIFC	7\
CPCR00001_0199_COIFC	0\
EMPT00001_0199_COIFC	0\
EMPT00002_0199_COIFC	0\
SWAR00034_0199_COIFC	3924\
SWAR00035_0199_COIFC	3460\
SWAR00073_0199_COIFC	3083\
SWAR00077_0199_COIFC	3105
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
### Add results of this step to the previous version of the summary table (
\f2\b\fs22 \cf18 \cb10 \CocoaLigature0 flash_table
\f0\b0\fs28 \cf2 \cb1 \CocoaLigature1 )
\f2\b\fs22 \cf18 \cb10 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0
\cf8 # Note that you will build one table per gene from now. If you have more than one gene we will merge all tables at the end of the workflow\cf18 \
\pard\pardeftab720\partightenfactor0

\f0\b0\fs28 \cf2 \cb1 \CocoaLigature1 # sort files
\f3\fs22 \cf12 \cb10 \CocoaLigature0 \
awk '\{if(NR>1) \{print\}\}' ../flash_table |sort > flash_table_sorted\
sort \cf5 COIBR\cf12 _amplicon_results |sed s/"_\cf5 COIBR\cf12 "/""/g > \cf5 COIBR\cf12 _amplicon_results_sorted\

\f0\fs28 \cf2 \cb1 \CocoaLigature1 # join files\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 join -t 
\f0\fs26 \cf19 \cb9 \expnd0\expndtw0\kerning0
\CocoaLigature1 $'\\t'
\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0  -a 1 -e "NA" -o 1.1,1.2,1.3,1.4,1.5,1.6,2.2 \cf12 flash_table_sorted \cf5 COIBR\cf12 _amplicon_results_sorted > tmp_\cf5 COIBR\cf12 _amplicon_table
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 awk 'BEGIN\{print "samplecode\\tnPFpairedReads\\tAverageLengthPFR1\\tAverageLengthPFR2\\tncleanPFpairedReads_Trimmomatic\\tnmergedPFreads_FLASH\\tnFullAmplicons"\} \{print $0\}' \cf12 tmp_\cf5 COIBR\cf12 _amplicon_table\cf11  > \cf5 COIBR\cf12 _
\f2\b \cf18 amplicon_table
\f3\b0 \cf2 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
# cleaning\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 \cb10 \CocoaLigature0 rm *_sorted tmp_\cf5 COIBR\cf12 _amplicon_table\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
### summary of current output files (
\f3\fs22 \cb10 \CocoaLigature0 datadir\cf11  \cf2 =\cf11  fastq_merge
\f0\fs24 \cf2 )
\fs28 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode.extendedFrags.fastq : paired reads merged with FLASH (fastq)\
$samplecode\cf5 _COIBR\cf11   : full length amplicon for which the primers used to amplify \cf5 COIBR \cf11 were found at both ends (fasta). Note that primers are NOT trimed yet.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf5 COIBR
\f2\b \cf18 _amplicon_table 
\f3\b0 \cf11 : current version of the follow up table including statistics for \cf5 COIBR\cf11  to be opened in excel (field separator = tab)
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\
\pard\pardeftab720\partightenfactor0

\f2\b\fs24 \cf21 \cb8 #If you have more that one gene (here we also have COIFC), perform this step for all other genes. ATTENTION edit scripts and parameter values accordingly
\f0\b0 \cf2 \cb1 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf2 \
\pard\pardeftab720\partightenfactor0

\f2\b\fs24 \cf21 \cb8 #when you have processed all your genes
\f0\b0\fs28 \cf2 \cb1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 rm myinpufiles
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\
\pard\pardeftab720\partightenfactor0
\cf4 #------------------------------------------------------------------------------------------------------------\
#Trim primers from amplicons\
#------------------------------------------------------------------------------------------------------------\
\pard\pardeftab720\partightenfactor0
\cf2 \
#Now, we need to trim primers from the 5' and 3' ends of the amplicons.\
\
#I follow up on 
\f3\fs22 \cf5 \cb10 \CocoaLigature0 COIBR
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\
### list input files (<=> output from previous step) [you should be in 
\f3\fs22 \cf0 fastq_merge 
\f0\fs28 \cf2 ]\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 ls *\cf5 _COIBR\cf11  > myinpufiles\cf5 _COIBR
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
#create a first script\
#the script takes as input, the list of output files from the previous step + the files that contain all possible combinations of forward+reverse primers + a prefix that will be used to name the SLURM script that will be created (typically prefix=gene) \
#the script will output a SLURM script 
\f3\fs22 \cf11 \cb10 \CocoaLigature0 run_\cf5 COIBR\cf11 _\cf12 trimamplicon.sh 
\f0\fs28 \cf2 \cb1 \CocoaLigature1 that contains a list of scripts that themselves contain all cmds required to trim forward and reverse primers\
#all scripts  
\f3\fs22 \cf5 \cb10 \CocoaLigature0 COIBR\cf11 _split*_trimamplicon.sh 
\f0\fs28 \cf2 \cb1 \CocoaLigature1 that will be called by the SLURM script are also created\
#note that we cannot directly include the cmds in the SLURM script because it will result in a submission failure for too large bash script\
#Note that the script 
\f3\fs22 \cf12 \cb10 \CocoaLigature0 trimprimers\cf11 _morethan1000\cf12 .sh 
\f0\fs28 \cf2 \cb1 \CocoaLigature1 will print in the slurm-* file the different input parameters as a reminder\cf12 \
\cf2 #example for 
\f3\fs22 \cf5 \cb10 \CocoaLigature0 COIBR
\f0\fs28 \cf12 \cb1 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 nano \cf12 trimprimers.sh
\f0\fs28 \cf0 \cb1 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf0 #-----------------------------------\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 \cb10 \CocoaLigature0 #!/bin/bash\
#SBATCH -J \cf12 trimprimers\cf11 \
#SBATCH -p workq\
#SBATCH -t \cf5 2:00:00\cf11 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 #create cmds\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 for i in \cf5 COIBR\cf11 _split*\
do\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf13 /rootedpathtofile\cb9 /\cf11 \cb10 trimprimer_morethan1000.sh\cf12  \cf11 myinpufiles\cf5 _COIBR\cf11  \cf12 $i\cf11  $i   \cf3 #script in the scripts/ directory of the github rep
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 done\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 #list all cmds\cf11 \
ls \cf5 COIBR\cf11 _split*\cf12 _trimamplicon.sh\cf11  > allscripts\
\cf2 #create SLURM script with all cmds 
\f2\b \cf8 [attention\cb9  \cf21 \cb15 this will be by far the most time consuming step of the pipeline\cf8 \cb10 ]
\f3\b0 \cf11 \
awk 'BEGIN\{print "#!\\/bin\\/bash\\n#SBATCH -J trimamplic\\n#SBATCH -p workq\\n#SBATCH -t \cf5 1-00:00:00\cf11 \\n\\n"\} \{print "echo \\042executing "$0"\\042\\n\\.\\/"$0"\\necho \\042"$0" completed\\042"\}' allscripts > run_\cf5 COIBR\cf11 _\cf12 trimamplicon.sh\cf11 \
\cf2 #cleaning\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 rm allscripts\cf0 \cb1 \CocoaLigature1 \
#-----------------------------------
\f0\fs28 \cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 #run script
\f3\fs22 \cf12 \cb10 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf12 sbatch trimprimers.sh
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 monitor job\
\pard\pardeftab720\partightenfactor0
\cf12 squeue -u "
\f3\fs22 \cf5 \cb10 \CocoaLigature0 username
\f0\fs28 \cf12 \cb1 \CocoaLigature1 "\
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
### check final status of job \
#the cmd will print status for all jobs for which a slurm-*.out file is present in datadir\
#If everything went fine, State should be COMPLETED.\
#if State=TIMEOUT you need to increase running time. \
#if State=FAILED, you need to check the slurm-*.out file to get details on the error\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 ls slurm-*.out |awk -F"[-.]" '\{print "seff " $2 " |grep \\042Job ID\\\\|State\\042"\}' |bash\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \kerning1\expnd0\expndtw0 #check outputs\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 #the output SLURM script is 
\f3\fs22 \cf11 \cb10 \CocoaLigature0 run_\cf5 COIBR\cf11 _trimamplicon.sh\

\f0\fs28 \cf2 \cb1 \CocoaLigature1 #the scripts called by the SLURM script are 
\f3\fs22 \cf5 \cb10 \CocoaLigature0 COIBR\cf11 _split*_trimamplicon.sh
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 ### cleaning\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 rm \cf12 trimprimers.sh\cf11  slurm-*.out\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf12 \
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ###execute the SLURM script that was generated in the previous step to trim primers\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 sbatch run_\cf5 COIBR\cf11 _trimamplicon.sh 
\f0\fs28 \cf21 \cb24 \CocoaLigature1 \

\f3\fs22 \cf11 \cb10 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ### monitor job\
\pard\pardeftab720\partightenfactor0
\cf12 squeue -u "
\f3\fs22 \cf5 \cb10 \CocoaLigature0 username
\f0\fs28 \cf12 \cb1 \CocoaLigature1 "  \cf8 #
\f3\fs22 \cf21 \cb8 \CocoaLigature0 this step will be by far the most time consuming step of the pipeline.\cf8 \cb10  
\f0\fs28 \cf12 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
### check final status of jobs \
#the cmd will print status for all jobs for which a slurm-*.out file is present in datadir\
#If everything went fine, State should be COMPLETED.\
#if State=TIMEOUT you need to increase running time. \cf8 #note that the slurm-*.out file lists the completed scripts which may help you to better estimate running time\cf2 \
#if State=FAILED, you need to check the slurm-*.out file to get details on the error\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 ls slurm-*.out |awk -F"[-.]" '\{print "seff " $2 " |grep \\042Job ID\\\\|State\\042"\}' |bash\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \kerning1\expnd0\expndtw0 ### count outputs = 
\f3\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode_\cf5 COIBR\cf11  
\f0\fs28 \cf2 \cb1 \CocoaLigature1 files\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 ls *_\cf5 COIBR \cf11 |wc -l \cf2 \cb9 #should be equal to the nb of samples +1 (because you have a file called \cf11 \cb10 myinpufiles\cf5 _COIBR\cf2 \cb9  ) \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ### cleaning\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 rm slurm-*.out myinpufiles\cf5 _COIBR\
\cf11 rm run_\cf5 COIBR\cf11 _trimamplicon.sh\cf12 \
rm \cf5 COIBR\cf12 .txt\
rm \cf5 COIBR\cf11 _split*\cf12 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf21 \cb24 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \
### summary of current output files (
\f3\fs22 \cb10 \CocoaLigature0 datadir\cf11  \cf2 =\cf11  fastq_merge
\f0\fs24 \cf2 )
\fs28 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode.extendedFrags.fastq : paired reads merged with FLASH (fastq)\
$samplecode\cf5 _COIBR\cf11   : full length amplicon for which the primers used to amplify \cf5 COIBR \cf11 were found at both ends (fasta). Note that primers are trimed.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf5 COIBR
\f2\b \cf18 _amplicon_table 
\f3\b0 \cf11 : current version of the follow up table including statistics for \cf5 COIBR\cf11  to be opened in excel (field separator = tab)
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\f2\b\fs24 \cf21 \cb8 #If you have more that one gene (here we also have COIFC), perform this step for all other genes. ATTENTION edit scripts and parameter values accordingly
\f0\b0 \cf2 \cb1 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf2 \
\
\pard\pardeftab720\partightenfactor0
\cf4 #------------------------------------------------------------------------------------------------------------\
#dereplication VSEARCH and clustering SWARM\
#------------------------------------------------------------------------------------------------------------\
\pard\pardeftab720\partightenfactor0

\f2\b\fs22 \cf8 \cb10 \CocoaLigature0 \
#Goals:\
#i) dereplication (ie removal of exact duplicates) with VSEARCH (the goal is to make the work of SWARM easier by reducing the nb of sequences that need to be compared)\
#ii) clustering of sequences based on similarity with SWARM\
\
#Note : do not be surprised, these steps are relatively fast.\
\pard\pardeftab720\partightenfactor0

\f0\b0\fs28 \cf2 \cb1 \CocoaLigature1 \
#I follow up on 
\f3\fs22 \cf5 \cb10 \CocoaLigature0 COIBR\

\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
### cd to datadir (if for some reason you got out)\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 cd fastq_merge\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \
### convert output of previous step to fasta\
#create script\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 nano convert.sh\
#-----------------------------------\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 \cb10 \CocoaLigature0 #!/bin/bash\
#SBATCH -J convert \
#SBATCH -p workq\
#SBATCH -t \cf5 2:00:00\cf11 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 for i in *\cf5 \cb10 \CocoaLigature0 _COIBR\cf0 \cb1 \CocoaLigature1 \
do\
awk -F"[: ]" '\{if (/^@/) \{print ">"$5"_"$6"_"$7\} else print $0\}' $i > $i".fasta"\
done\
#-----------------------------------\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 #run script\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 sbatch convert.sh \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 #monitor job\
\pard\pardeftab720\partightenfactor0
\cf12 squeue -u "
\f3\fs22 \cf5 \cb10 \CocoaLigature0 username
\f0\fs28 \cf12 \cb1 \CocoaLigature1 "\
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
### check final status of job \
#the cmd will print status for all jobs for which a slurm-*.out file is present in datadir\
#If everything went fine, State should be COMPLETED.\
#if State=TIMEOUT you need to increase running time.\
#if State=FAILED, you need to check the slurm-*.out file to get details on the error\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 ls slurm-*.out |awk -F"[-.]" '\{print "seff " $2 " |grep \\042Job ID\\\\|State\\042"\}' |bash\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \kerning1\expnd0\expndtw0 #output = 
\f3\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode_\cf5 COIBR\cf11 .fasta 
\f0\fs28 \cf2 \cb1 \CocoaLigature1 files
\f3\fs22 \cf0   \

\f0\fs28 \cf2 #count output\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 ls *\cf5 _COIBR\cf11 .fasta |wc -l \cf2 \cb9 #should be equal to the nb of samples\cf0 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 #cleaning\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 rm convert.sh slurm-*.out\
\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 ### trash original output of 
\f3\fs22 \cf5 \cb10 \CocoaLigature0 COIBR\cf2 _mineamplicon.sh
\f0\fs28 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 rm *\cf5 \cb10 \CocoaLigature0 _COIBR\cf0 \cb1 \CocoaLigature1 \
\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 ### dereplication (ie removal of exact duplicates) with VSEARCH (the goal is to make the work of SWARM easier by reducing the nb of sequences that need to be compared). \
#A single sequence is retained for each pool of exactly identical sequences. The nb of sequences in each pool is included in sequence headers of output files (size=xx)\
#create script\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 nano vsearch.sh\
#-----------------------------------\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 \cb10 \CocoaLigature0 #!/bin/bash\
#SBATCH -J vsearch\
#SBATCH -p workq\
#SBATCH -t \cf5 2:00:00\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf12 module load \cf13 \cb1 bioinfo/VSEARCH/2.22.1   \cf8 #adapt path to your cluster\cf11 \cb10 \
\
for i in *\cf5 _COIBR\cf11 .fasta\
do
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 vsearch \cf11 \cb10 \CocoaLigature0 --derep_fulllength $i --sizeout --fasta_width 0 --output $i".dereplic" \
done\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf22 \cb1 \CocoaLigature1 #details on parameters:\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf23 \cb10 \CocoaLigature0 #--sizeout : include abundance information when relabelling\
#--fasta_width : width of FASTA seq lines, 0 for no wrap (80)\cf0 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf0 #-----------------------------------\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 #run script\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 sbatch vsearch.sh\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 #monitor job\
\pard\pardeftab720\partightenfactor0
\cf12 squeue -u "
\f3\fs22 \cf5 \cb10 \CocoaLigature0 username
\f0\fs28 \cf12 \cb1 \CocoaLigature1 "\
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
### check final status of jobs \
#the cmd will print status for all jobs for which a slurm-*.out file is present in datadir\
#If everything went fine, State should be COMPLETED.\
#if State=TIMEOUT you need to increase running time.\
#if State=FAILED, you need to check the slurm-*.out file to get details on the error\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 ls slurm-*.out |awk -F"[-.]" '\{print "seff " $2 " |grep \\042Job ID\\\\|State\\042"\}' |bash\
\pard\pardeftab720\partightenfactor0

\f2\b \cf8 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 #note that this script can endup with a FAILED (exit code=1) status even if everything went right. \
#It is because you may have processed empty files (which is fine) and vsearch returns an error in that specific case. \
#Nevertheless, it is safer to check that you have at least some non empty files as output to be sure that the script really worked.\
\pard\pardeftab720\partightenfactor0

\f0\b0\fs28 \cf2 \cb1 \CocoaLigature1 ### count 
\f1\b \ul empty
\f0\b0 \ulnone  outputs to make sure you have at least some non empty files (ie that the script worked)
\f3\fs22 \cb9 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 \cb10 for file in *_\cf5 COIBR\cf11 .fasta.dereplic; do if [[ ! -s $file ]]; then echo $file; fi; done |wc -l
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 #output = 
\f3\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode_\cf5 COIBR\cf11 .fasta.dereplic 
\f0\fs28 \cf2 \cb1 \CocoaLigature1 files
\f3\fs22 \cf0  \

\f0\fs28 \cf2 #count output\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 ls *_\cf5 COIBR\cf11 .fasta.dereplic |wc -l \cf2 \cb9 #should be equal to the nb of samples\cf0 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 #cleaning\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 rm vsearch.sh slurm-*.out\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb9 ###remove sequences with N (required because SWARM crashes when there are N in sequences)\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 \cb1 nano rmseqwithN.sh\
#-----------------------------------\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 \cb10 \CocoaLigature0 #!/bin/bash\
#SBATCH -J rmN\
#SBATCH -p workq\
#SBATCH -t \cf5 1:00:00\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb9 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 for i in *\cf5 _COIBR\cf11 .fasta.dereplic\
do
\f0\fs28 \cf2 \cb9 \CocoaLigature1 \

\f3\fs22 \cf11 \cb10 \CocoaLigature0 awk -v RS=">" '!/N/\{printf $0RT\}' $i > $i".noN"\
done\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf3 #cleaning\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 rm *\cf5 _COIBR\cf11 .fasta.dereplic\
rename '.noN' '' *\cf5 _COIBR\cf11 .fasta.dereplic.noN\
\pard\pardeftab720\partightenfactor0
\cf0 \cb1 \CocoaLigature1 #-----------------------------------\cf11 \cb10 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 #run script\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 sbatch rmseqwithN.sh\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 #monitor job\
\pard\pardeftab720\partightenfactor0
\cf12 squeue -u "
\f3\fs22 \cf5 \cb10 \CocoaLigature0 username
\f0\fs28 \cf12 \cb1 \CocoaLigature1 "\
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
### check final status of job\
#the cmd will print status for all jobs for which a slurm-*.out file is present in datadir\
#If everything went fine, State should be COMPLETED.\
#if State=TIMEOUT you need to increase running time.\
#if State=FAILED, you need to check the slurm-*.out file to get details on the error\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 ls slurm-*.out |awk -F"[-.]" '\{print "seff " $2 " |grep \\042Job ID\\\\|State\\042"\}' |bash\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \kerning1\expnd0\expndtw0 #output = 
\f3\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode_\cf5 COIBR\cf11 .fasta.dereplic 
\f0\fs28 \cf2 \cb1 \CocoaLigature1 files (ie same as input)\
#cleaning\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 rm rmseqwithN.sh slurm-*.out\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \
\
### clustering with SWARM (sequences are merged into clusters. the parameter 
\f1\b \cf5 d
\f0\b0 \cf2  determines the nb of mutations you tolerate for merging two sequences -note that is not exactly that but it is an approximation of what d is)\
#Outputs contain 1 sequence per cluster (the most frequent one). The total nb of sequences in each cluster (identical sequences + not identical sequences) is included in sequence headers of output files (size=xx)\
#create script\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 nano swarm.sh\
#-----------------------------------\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 \cb10 \CocoaLigature0 #!/bin/bash\
#SBATCH -J swarm\
#SBATCH -p workq\
#SBATCH -t \cf5 2:00:00\
\
\cf11 module load \cf13 \cb1 bioinfo/swarm/3.1.3   \cf8 #adapt path to your cluster\cf11 \cb10 \
\
for i in *\cf5 _COIBR\cf11 .fasta.dereplic\
do
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \

\f3\fs22 \cf11 \cb10 \CocoaLigature0 swarm -w $i".swarmOTU" -z $i -d 
\f2\b \cf25 1
\f3\b0  \cf12 -o\cf25  \cf11 $i".swarmout" \cf12 -l \cf11 $i".swarmlog"  \cf8 #change the value of d if you want. the higher it is the higher is the probablity of clustering paralogs. I've taken 1 in our case\cf11 \
\pard\pardeftab720\partightenfactor0
done\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf22 \cb1 \CocoaLigature1 \
#details on parameters:\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf23 \cb10 \CocoaLigature0 #-d, resolution <=> ca nb of mutations between pairs of sequences if you increase d you cluster sequences with more differences\
#-l, --log FILENAME                  log to file, not to stderr\
#-o, output result filename\
#-w, write seed seqs with abundances to FASTA\
#-z, abundance annotation in usearch style <=> input file in our case\cf0 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf0 #-----------------------------------\cf11 \cb10 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 #run script\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 sbatch swarm.sh\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 #monitor job\
\pard\pardeftab720\partightenfactor0
\cf12 squeue -u "
\f3\fs22 \cf5 \cb10 \CocoaLigature0 username
\f0\fs28 \cf12 \cb1 \CocoaLigature1 "\
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
### check final status of job\
#the cmd will print status for all jobs for which a slurm-*.out file is present in datadir\
#If everything went fine, State should be COMPLETED.\
#if State=TIMEOUT you need to increase running time.\
#if State=FAILED, you need to check the slurm-*.out file to get details on the error\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 ls slurm-*.out |awk -F"[-.]" '\{print "seff " $2 " |grep \\042Job ID\\\\|State\\042"\}' |bash\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \kerning1\expnd0\expndtw0 #output = 
\f3\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode_\cf5 COIBR\cf11 .fasta.dereplic.swarmOTU 
\f0\fs28 \cf2 \cb1 \CocoaLigature1 files\
#count outputs\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 ls *_\cf5 COIBR\cf11 .fasta.dereplic.swarmOTU |wc -l \cf2 \cb9 #should be equal to the nb of samples
\f0\fs28 \cb1 \CocoaLigature1 \
#cleaning\

\f3\fs22 \cf0 rm swarm.sh slurm-*.out\
rm \cf11 \cb10 \CocoaLigature0 *.swarmout *.swarmlog\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
### get statistics\
#create script\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 nano getstatswarm.sh\
#-----------------------------------\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 \cb10 \CocoaLigature0 #!/bin/bash\
#SBATCH -J statswarm\
#SBATCH -p workq\
#SBATCH -t \cf5 2:00:00\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f3\fs20 \cf2 #for each sample, get totalNbofsequences, nb of clusters, average nb of sequences in clusters, median nb of sequences in clusters, miniumun nb of sequences in clusters, maximum nb of sequences in clusters\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\fs22 \cf11 \cb10 \CocoaLigature0 for i in *_\cf5 COIBR\cf11 .fasta.dereplic.swarmOTU\
do
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \

\f3\fs22 \cf11 \cb10 \CocoaLigature0 echo $i 
\f0\fs26 \cf12 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 >> 
\f3\fs22 $i".stats" && \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 awk -F";" '\{if (/^>/) \{print $2\}\}' $i\cf26  \cf11 |sed s/"size="/""/g |\cf13 /rootedpathtofile\cb9 /\cf11 \cb10 get_SumCountMeanMedianMinMax.sh
\f0\fs26 \cf12 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1  >> 
\f3\fs22 $i".stats"   \cf8 #script in the script/ directory of the github rep. Adapt path.
\f0\fs26 \cf12 \

\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 done\
\pard\pardeftab720\partightenfactor0

\fs20 \cf2 \cb1 \CocoaLigature1 #merge all stats in a single file\
\pard\pardeftab720\partightenfactor0

\fs22 \cf11 \cb10 \CocoaLigature0 cat *_\cf5 COIBR\cf11 .fasta.dereplic.swarmOTU.stats |sed s/"_\cf5 COIBR\cf11 .fasta.dereplic.swarmOTU"/""/g > 
\f4\fs24 \cf12 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 tmp_
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 COIBR\cf12 _swarm_results\cf11 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf2 \cb1 \CocoaLigature1 #create final file
\fs22 \cf11 \cb10 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb1 \CocoaLigature1 awk 'NR % 2 == 1 \{ o=$0 ; next \} \{ print o "\\t" $0 \}' 
\f4\fs24 \cf12 \expnd0\expndtw0\kerning0
tmp_
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 COIBR\cf12 _swarm_results > \cf5 COIBR\cf12 _swarm_results\cf11 \
\pard\pardeftab720\partightenfactor0

\fs20 \cf2 \cb1 \CocoaLigature1 #cleaning\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\fs22 \cf11 \cb10 \CocoaLigature0 rm *_\cf5 COIBR\cf11 .fasta.dereplic.swarmOTU.stats 
\f4\fs24 \cf12 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 tmp_
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 COIBR\cf12 _swarm_results
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 #-----------------------------------
\f0\fs28 \cf2 \
#run script\

\f3\fs22 \cf0 sbatch getstatswarm.sh\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 #monitor job\
\pard\pardeftab720\partightenfactor0
\cf12 squeue -u "
\f3\fs22 \cf5 \cb10 \CocoaLigature0 username
\f0\fs28 \cf12 \cb1 \CocoaLigature1 "\
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
### check final status of job \
#the cmd will print status for all jobs for which a slurm-*.out file is present in datadir\
#If everything went fine, State should be COMPLETED.\
#if State=TIMEOUT you need to increase running time.\
#if State=FAILED, you need to check the slurm-*.out file to get details on the error\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 ls slurm-*.out |awk -F"[-.]" '\{print "seff " $2 " |grep \\042Job ID\\\\|State\\042"\}' |bash\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \kerning1\expnd0\expndtw0 #check results\
\pard\pardeftab720\partightenfactor0

\f3\fs20 \cf2 #columns = samplecode, totalNbofsequences, nb of clusters, average nb of sequences in clusters, median nb of sequences in clusters, miniumun nb of sequences in clusters, maximum nb of sequences in clusters\
\pard\pardeftab720\partightenfactor0

\fs22 \cf12 \cb10 \CocoaLigature0 more \cf5 COIBR\cf12 _swarm_results\cf11 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf4 \cb17 #expected output for the example data set\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 \cb14 \CocoaLigature0 more \cf5 COIBR\cf12 _swarm_results
\f0\fs28 \cf2 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \CocoaLigature0 CEXT00001_0199	NA	0	NA	NA	NA	NA\
CPCR00001_0199	NA	0	NA	NA	NA	NA\
EMPT00001_0199	NA	0	NA	NA	NA	NA\
EMPT00002_0199	NA	0	NA	NA	NA	NA\
SWAR00034_0199	2952	140	21.0857	3	1	2298\
SWAR00035_0199	6093	174	35.0172	3	1	4940\
SWAR00073_0199	2212	182	12.1538	3	1	867\
SWAR00077_0199	4646	487	9.54004	3	1	868\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 \cb14 \CocoaLigature0 more \cf5 COIFC\cf12 _swarm_results
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb14 \CocoaLigature0 CEXT00001_0199	7	4	1.75	1.5	1	3\
CPCR00001_0199	NA	0	NA	NA	NA	NA\
EMPT00001_0199	NA	0	NA	NA	NA	NA\
EMPT00002_0199	NA	0	NA	NA	NA	NA\
SWAR00034_0199	3924	405	9.68889	1	1	1112\
SWAR00035_0199	3460	385	8.98701	1	1	818\
SWAR00073_0199	3083	529	5.82798	1	1	947\
SWAR00077_0199	3105	554	5.60469	1	1	1139\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
#cleaning\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 rm getstatswarm.sh slurm-*.out \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 \cb10 \CocoaLigature0 \
\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ### merge statistics with 
\f3\fs22 \cf5 \cb10 \CocoaLigature0 COIBR
\f2\b \cf18 _amplicon_table\

\f0\b0\fs28 \cf2 \cb1 \CocoaLigature1 # sort files
\f3\fs22 \cf12 \cb10 \CocoaLigature0 \
awk '\{if(NR>1) \{print\}\}' \cf5 COIBR
\f2\b \cf18 _amplicon_table
\f3\b0 \cf12  |sort > \cf5 COIBR
\f2\b \cf18 _amplicon_table
\f3\b0 \cf12 _sorted\
sort \cf5 COIBR\cf12 _swarm_results > \cf5 COIBR\cf12 _swarm_results_sorted\

\f0\fs28 \cf2 \cb1 \CocoaLigature1 # join files\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 join -t 
\f0\fs26 \cf19 \cb9 \expnd0\expndtw0\kerning0
\CocoaLigature1 $'\\t'
\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0  -a 1 -e "NA" -o 1.1,1.2,1.3,1.4,1.5,1.6,1.7,2.2,2.3,2.4,2.5,2.6,2.7 \cf5 COIBR
\f2\b \cf18 _amplicon_table
\f3\b0 \cf12 _sorted \cf5 COIBR\cf12 _swarm_results_sorted > tmp_\cf5 COIBR\cf12 _swarm_table\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 awk 'BEGIN\{print "samplecode\\tnPFpairedReads\\tAverageLengthPFR1\\tAverageLengthPFR2\\tncleanPFpairedReads_Trimmomatic\\tnmergedPFreads_FLASH\\tnFullAmplicons\\tninputSeq_Swarm\\tnclusters_Swarm\\tAverageNSeqinClusters_Swarm\\tMedianNSeqinClusters_Swarm\\tMinNSeqinClusters_Swarm\\tMaxNSeqinClusters_Swarm"\} \{print $0\}' \cf12 tmp_\cf5 COIBR\cf12 _swarm_table \cf11 > \cf5 COIBR
\f2\b \cf18 _swarm_table
\f3\b0 \cf2 \
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 # cleaning\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 \cb10 \CocoaLigature0 rm *_sorted tmp_\cf5 COIBR\cf12 _swarm_table\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
### summary of current output files (
\f3\fs22 \cb10 \CocoaLigature0 datadir\cf11  \cf2 =\cf11  fastq_merge
\f0\fs24 \cf2 )
\fs28 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode.extendedFrags.fastq : paired reads merged with FLASH (fastq)\
$samplecode\cf5 _COIBR\cf11 .fasta  : full length amplicon for which the primers used to amplify \cf5 COIBR \cf11 were found at both ends (fasta). Note that primers are trimed.\
$samplecode_\cf5 COIBR\cf11 .fasta.dereplic : after dereplication with VSEARCH (fasta). Note that nb of replicates (size) are included in headers
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \

\f3\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode_\cf5 COIBR\cf11 .fasta.dereplic.swarmOTU : after clustering with SWARM
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf5 \cb10 \CocoaLigature0 COIBR
\f2\b \cf18 _swarm_table 
\f3\b0 \cf11 : current version of the follow up table including statistics for \cf5 COIBR\cf11  to be opened in excel (field separator = tab)
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\
\pard\pardeftab720\partightenfactor0

\f2\b\fs24 \cf21 \cb8 #If you have more that one gene, perform this step for all other genes. ATTENTION edit scripts and parameter values accordingly
\f0\b0 \cf2 \cb1 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf2 \
\pard\pardeftab720\partightenfactor0
\cf21 \cb24 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb1 #------------------------------------------------------------------------------------------------------------\
#selection of clusters based on the nb of sequences they contain\
#------------------------------------------------------------------------------------------------------------\
\pard\pardeftab720\partightenfactor0
\cf2 \
#Goal : keep only clusters of sequences that contain \cf5 minseq\cf2  sequences or more, \cf5 minseq \cf2 being fixed by the user\
\pard\pardeftab720\partightenfactor0

\f1\b \cf8 #IMPORTANT NOTE : you should test different value of \cf5 minseq\cf8 . You may even keep all sequences to have a complete overview (ie you could spot rare variants (that could be contaminants).\
#NOTE THAT I have included a module to re-filter later on a more stringent \cf5 minseq \cf8 if you realised that your filtering was not stringent enough\
#NOTE THAT If you have included extraction; PCR; EmptyWell (negative) controls, \cf5 minseq \cf8 should be chosen  > to the maximum value of 
\f3\b0\fs22 \cf11 \cb10 \CocoaLigature0 MaxNSeqinClusters_Swarm 
\f1\b\fs28 \cf8 \cb1 \CocoaLigature1 over all controls.
\f0\b0 \cf2 \
\
#I follow up on 
\f3\fs22 \cf5 \cb10 \CocoaLigature0 COIBR\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
### cd to datadir (if for some reason you got out)\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 cd fastq_merge\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \
#create script\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 nano selection.sh  \cf8 #!!! ATTENTION set a value for 
\f0\fs28 \cf5 minseq 
\f3\fs22 \cf8 in script !!!\cf0 \
#-----------------------------------\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 \cb10 \CocoaLigature0 #!/bin/bash\
#SBATCH -J select\
#SBATCH -p workq\
#SBATCH -t \cf5 2:00:00\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 #set threshold value <=> nb of sequences from which a cluster should be kept\
#if minseq is set to 10 clusters with 10 and more sequences will be kept.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 declare -i \cf12 minseq
\f2\b =\cf5 \cb27 XX\cf5 \cb10   \cf8 ## !!! set the value of minseq here -- DO NOT INCLUDE SPACES BEFORE OF AFTER THE "=" sign -- !!! \cf8 \cb27 I will use minseq=10 for the example data set\cf8 \cb10   ###
\f3\b0 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf5 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 #merge headers and sequences on the same line for future selection\cf11 \
for i in *\cf5 _COIBR\cf11 .fasta.dereplic.swarmOTU\
do
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 awk ' \{if (/^>/) \{print $1"\'a3"\} else print $0\}' \cf11 \cb10 \CocoaLigature0 $i\cf12 \cb1 \CocoaLigature1  |tr "\\n" " " |sed s/" "/""/g |sed s/">"/"\\n>"/g |sed s/"\'a3"/" "/g |awk '\{if (NR>1) \{print\}\}' |sed s/"size="/""/g > "tmp_"\cf11 \cb10 \CocoaLigature0 $i\
done\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 #selection\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 for i in tmp_*\cf5 _COIBR\cf11 .fasta.dereplic.swarmOTU\
do\cf2 \
\cf11 awk -F";" -v thr=$minseq '\{if ($2>=thr\cf12 ) \{print\}\}' $i > $i".select"\
done\cf11 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 #convert back to fasta + modify headers to include "_size"\
\pard\pardeftab720\partightenfactor0
\cf12 for i in \cf11 tmp_*\cf5 _COIBR\cf11 .fasta.dereplic.swarmOTU.select\cf12 \
do\
awk -F";" '\{print $1"_size"$2"\\n"$3\}' $i > $i".def"\
done\cf2  \
#rename extra space in front of sequence\
\cf12 sed -i s/" "/""/g \cf11 tmp_*\cf5 _COIBR\cf11 .fasta.dereplic.swarmOTU.select.def\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 #rename final files\
\pard\pardeftab720\partightenfactor0
\cf12 rename 'tmp_' '' \cf11 tmp_*\cf5 _COIBR\cf11 .fasta.dereplic.swarmOTU.select.def\
rename '.def' '' *.select.def\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 #cleaning\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 rm tmp_*\cf5 _COIBR\cf11 .fasta.dereplic.swarmOTU tmp_*\cf5 _COIBR\cf11 .fasta.dereplic.swarmOTU.select
\f0\fs28 \cf22 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 #-----------------------------------\cf11 \cb10 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 #run script\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 sbatch selection.sh \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 #monitor job\
\pard\pardeftab720\partightenfactor0
\cf12 squeue -u "
\f3\fs22 \cf5 \cb10 \CocoaLigature0 username
\f0\fs28 \cf12 \cb1 \CocoaLigature1 "\
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
### check final status of jobs \
#the cmd will print status for all jobs for which a slurm-*.out file is present in datadir\
#If everything went fine, State should be COMPLETED.\
#if State=TIMEOUT you need to increase running time.\
#if State=FAILED, you need to check the slurm-*.out file to get details on the error\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 ls slurm-*.out |awk -F"[-.]" '\{print "seff " $2 " |grep \\042Job ID\\\\|State\\042"\}' |bash\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \kerning1\expnd0\expndtw0 #output = 
\f3\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode_\cf5 COIBR\cf11 .fasta.dereplic.swarmOTU.select 
\f0\fs28 \cf2 \cb1 \CocoaLigature1 files\
#count output\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 ls *_\cf5 COIBR\cf11 .fasta.dereplic.swarmOTU.select |wc -l \cf2 \cb9 #should be equal to the nb of samples
\f0\fs28 \cb1 \CocoaLigature1 \
#cleaning\

\f3\fs22 \cf0 rm selection.sh slurm-*.out\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \
\
### get statistics\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 for i in *_\cf5 COIBR\cf11 .fasta.dereplic.swarmOTU.select\
do\
echo $i >> $i".stats" && grep -c ">" $i >> $i".stats"\
done
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 cat *_\cf5 COIBR\cf11 .fasta.dereplic.swarmOTU.select.stats > 
\f4\fs24 \cf12 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 tmp_
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 COIBR\cf12 _swarmselect_results\cf11 \
\
\cf0 \cb1 \CocoaLigature1 awk 'NR % 2 == 1 \{ o=$0 ; next \} \{ print o "\\t" $0 \}' 
\f4\fs24 \cf12 \expnd0\expndtw0\kerning0
tmp_
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 COIBR\cf12 _swarmselect_results |sed s/"\cf11 _\cf5 COIBR\cf11 .fasta.dereplic.swarmOTU.select"/""/g\cf12  > \cf5 COIBR\cf12 _swarmselect_results
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0
rm *_\cf5 COIBR\cf11 .fasta.dereplic.swarmOTU.select.stats 
\f4\fs24 \cf12 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 tmp_
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 COIBR\cf12 _swarmselect_results\cf11 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 #check results\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 \cb10 \CocoaLigature0 more \cf5 COIBR\cf12 _swarmselect_results
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f0\fs28 \cf4 \cb17 \CocoaLigature1 #expected output for the example data set\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 \CocoaLigature0 more \cf5 COIBR\cf12 _swarmselect_results\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf11 CEXT00001_0199	0\
CPCR00001_0199	0\
EMPT00001_0199	0\
EMPT00002_0199	0\
SWAR00034_0199	10\
SWAR00035_0199	16\
SWAR00073_0199	17\
SWAR00077_0199	39\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb14 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 \cb17 \CocoaLigature0 more \cf5 COIFC\cf12 _swarmselect_results\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf11 CEXT00001_0199	0\
CPCR00001_0199	0\
EMPT00001_0199	0\
EMPT00002_0199	0\
SWAR00034_0199	19\
SWAR00035_0199	19\
SWAR00073_0199	26\
SWAR00077_0199	29\
\pard\pardeftab720\partightenfactor0
\cb10 \
\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ### merge statistics with 
\f3\fs22 \cf5 \cb10 \CocoaLigature0 COIBR
\f2\b \cf18 _swarm_table\

\f0\b0\fs28 \cf2 \cb1 \CocoaLigature1 # sort files
\f3\fs22 \cf12 \cb10 \CocoaLigature0 \
awk '\{if(NR>1) \{print\}\}' \cf5 COIBR
\f2\b \cf18 _swarm_table
\f3\b0 \cf12  |sort > \cf5 COIBR
\f2\b \cf18 _swarm_table
\f3\b0 \cf12 _sorted\
sort \cf5 COIBR\cf12 _swarmselect_results > \cf5 COIBR\cf12 _swarmselect_results_sorted\

\f0\fs28 \cf2 \cb1 \CocoaLigature1 # join files\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 join -t 
\f0\fs26 \cf19 \cb9 \expnd0\expndtw0\kerning0
\CocoaLigature1 $'\\t'
\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0  -a 1 -e "NA" -o 1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,1.10,1.11,1.12,1.13,2.2 \cf5 COIBR
\f2\b \cf18 _swarm_table
\f3\b0 \cf12 _sorted \cf5 COIBR\cf12 _swarmselect_results_sorted > tmp_\cf5 COIBR\cf12 _swarmselect_table\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 awk 'BEGIN\{print "samplecode\\tnPFpairedReads\\tAverageLengthPFR1\\tAverageLengthPFR2\\tncleanPFpairedReads_Trimmomatic\\tnmergedPFreads_FLASH\\tnFullAmplicons\\tninputSeq_Swarm\\tnclusters_Swarm\\tAverageNSeqinClusters_Swarm\\tMedianNSeqinClusters_Swarm\\tMinNSeqinClusters_Swarm\\tMaxNSeqinClusters_Swarm\\tnclusters_Swarm_FilterMinseq"\} \{print $0\}' \cf12 tmp_\cf5 COIBR\cf12 _swarmselect_table \cf11 > \cf5 COIBR
\f2\b \cf18 _swarmselect_table
\f3\b0 \cf2 \
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 # cleaning\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 \cb10 \CocoaLigature0 rm *_sorted tmp_\cf5 COIBR\cf12 _swarmselect_table\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
### summary of current output files (
\f3\fs22 \cb10 \CocoaLigature0 datadir\cf11  \cf2 =\cf11  fastq_merge
\f0\fs24 \cf2 )
\fs28 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode.extendedFrags.fastq : paired reads merged with FLASH (fastq)\
$samplecode\cf5 _COIBR\cf11 .fasta  : full length amplicon for which the primers used to amplify \cf5 COIBR \cf11 were found at both ends (fasta). Note that primers are trimed.\
$samplecode_\cf5 COIBR\cf11 .fasta.dereplic : after dereplication with VSEARCH (fasta). Note that nb of replicates (size) are included in headers
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \

\f3\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode_\cf5 COIBR\cf11 .fasta.dereplic.swarmOTU : after clustering with SWARM
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \

\f3\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode_\cf5 COIBR\cf11 .fasta.dereplic.swarmOTU.select : after clustering with SWARM and after selection of clusters based on a minimum nb of sequences\
\pard\pardeftab720\partightenfactor0
\cf5 COIBR
\f2\b \cf18 _swarmselect_table 
\f3\b0 \cf11 : current version of the follow up table including statistics for \cf5 COIBR\cf11  to be opened in excel (field separator = tab)
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\
\pard\pardeftab720\partightenfactor0

\f2\b\fs24 \cf21 \cb8 #If you have more that one gene, perform this step for all other genes. ATTENTION edit scripts and parameter values accordingly
\f0\b0 \cf2 \cb1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\fs28 \cf2 \
\
\pard\pardeftab720\partightenfactor0
\cf4 #------------------------------------------------------------------------------------------------------------\
#removal of potential chimera    \cb9 \
#-----------------------------------------\cb1 -------------------------------------------------------------------\
\pard\pardeftab720\partightenfactor0
\cf2 \
#Chimeras are sequences formed from two or more biological sequences joined together. \
#Amplicons with chimeric sequences can form during PCR. \
#
\f1\b \cf8 Chimeras can be common in amplicon sequencing especially when closely related sequences are amplified..
\f0\b0 \cf2 .\
#take a look to this page (https://drive5.com/usearch/manual/chimeras.html) and this paper (\cf28 \expnd0\expndtw0\kerning0
\ul \ulc28 https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3044863/)\cf2 \kerning1\expnd0\expndtw0 \ulnone \
\
\pard\pardeftab720\partightenfactor0

\f1\b \cf8 #NOTE : keep in mind that it is extremely difficult to automatically distinguish chimeras from correct sequences
\f0\b0 \cf2 \
\
#algorithms divide each query sequence into four segments and look for similarity of each segment to sequences in the set of potential parents. \
#There is two way of detecting chimeras\
#i) de novo : all sequences are potential parents but In this case, parent sequences should be more abundant than their chimeras because the parent amplicons will have undergone more rounds of amplification. \
#ii) by using a reference databse : parent sequences are listed in this reference database (in this case relative abundances are not used)\
\
\pard\pardeftab720\partightenfactor0
\cf8 #\ul a key parameter for the de novo search is 
\f1\b abskew
\f0\b0 \ulnone  which (to be short) controls the relative abundance of parent and chimeric sequences. For example, if abskew= 2.0, it means that the parents should be at least 2 times more abundant than their chimera. \cf2 \
\cf8 #Here is an important note from the developper of USEARCH : "Based on recent results (not yet written up), I believe that with abskew=2 there are many more false positive chimera detections. Perfect chimera detection is not possible due to unbiquitous fake models (see UCHIME2 paper), but with abskew=16 I believe there is a much more reasonable balance between false positives and false negatives." \cf2 #Note that Input order matters for chimera detection and sequences need to be sorted by decreasing abundance\
\
\pard\pardeftab720\partightenfactor0

\f1\b \cf8 #All this to say that you may either miss chimera or discard real sequences. So when it is possible you should use a reference database that lists \ul ALL \ulnone your parent sequences (fasta format); and; of course a double check is preferable\
#My suggestions are (when possible)\
#i) to take a look to the sequences that are flagged as chimeras by USEARCH to be sure you did not exclude valid sequences \
#ii) to critically examine final sequences at the very end of the worflow to be sure that all chimeras have been removed.
\f0\b0 \cf2 \
\
\
\pard\pardeftab720\partightenfactor0
\cf3 \cb17 #NOTA : I provide a reference database for the example data (script/referencedatabase.fas in the github rep) that is composed of the COI (FC+BR) of the strains used to create bulks of samples:\
#EPCO00020_0199 
\f6\i T. cacoeciae
\f0\i0 \
#EPCO00277_0199 
\f6\i T. evanescens
\f0\i0 \
#EPCO00395_0199 
\f6\i T. brassicae
\f0\i0 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \
#I follow up on 
\f3\fs22 \cf5 \cb10 \CocoaLigature0 COIBR
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\
### cd to datadir (if for some reason you got out)\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 cd fastq_merge\
\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 ### So, you have two \ul mutually exclusive\ulnone  options for the script\
\
\
#-------- OPTION 1 : look for chimeras when you 
\f1\b \ul \ulc2 DO NOT HAVE
\f0\b0  \ulnone a reference database --------#  \cf2 \cb17 #===> for the example data set I will use the 
\f3\fs22 \cf11 \CocoaLigature0 referencedatabase.fas 
\f0\fs28 \cf2 \CocoaLigature1 file as reference database
\f3\fs22 \cf0 \cb1 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 #create script\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 nano usearch_chimeraDENOVO.sh\
#-----------------------------------\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 \cb10 \CocoaLigature0 #!/bin/bash\
#SBATCH -J chimera\
#SBATCH -p workq\
#SBATCH -t \cf5 2:00:00\
\cf11 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf12 \cb9 module load \cf13 \cb1 bioinfo/USEARCH/11.0.667   \cf15 #adapt PATH to USEARCH\cf12 \cb9 \
\pard\pardeftab720\partightenfactor0
\cf2 \
#include abundancy to headers in a format that fits with usearch requirements\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 for i in *_\cf5 \cb10 COIBR\cf11 \cb9 .fasta.dereplic.swarmOTU.select\
do\
awk -F"_" '\{if (/^>/) \{print $0";size="substr($4,5)";"\} else print $0\}' $i > "tmp_"$i\
done\
\pard\pardeftab720\partightenfactor0
\cf2 #sort sequences by abundancy\
\cf12 for i in \cf11 tmp_*_\cf5 \cb10 COIBR\cf11 \cb9 .fasta.dereplic.swarmOTU.select\cf2 \
\cf12 do\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 usearch  -sortbysize $i -fastaout "tmp_"$i\
done\cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 #look for chimeras
\f2\b \ul \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\b0 \cf11 \ulnone for i in tmp_tmp_*_\cf5 \cb10 COIBR\cf11 \cb9 .fasta.dereplic.swarmOTU.select\
do\
usearch -uchime3_denovo $i -uchimeout $i".log" -chimeras $i".chimera" -nonchimeras $i".remchimera"  -abskew 
\f2\b \cf5 10 \cf8 #mind the abskew parameters. keep in mind that it can lead to false negatives or false positives !\cf5  
\f3\b0 \cf11 \
done\
\pard\pardeftab720\partightenfactor0
\cf2 #unwrap *.remchimera and *.chimera files\
\pard\pardeftab720\sl280\partightenfactor0

\f4\fs24 \cf12 \expnd0\expndtw0\kerning0
\CocoaLigature1 for i in 
\f3\fs22 \cf11 \kerning1\expnd0\expndtw0 \CocoaLigature0 *_\cf5 \cb10 COIBR\cf11 \cb9 .fasta.dereplic.swarmOTU.select*chimera
\f4\fs24 \cf12 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
do\
awk '/^>/ \{printf("\\n%s\\n",$0);next; \} \{ printf("%s",$0);\}  END \{printf("\\n");\}' < 
\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 $i \cb9 > \cb10 $i".unwrap"\
done\cb9 \
\pard\pardeftab720\partightenfactor0
\cf2 \CocoaLigature1 #remove the first, empty line, in output unwrapped files
\f0\fs28 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \CocoaLigature0 sed -i '1d' *_\cf5 \cb10 COIBR\cf11 \cb9 .fasta.dereplic.swarmOTU.select*chimera.unwrap\
\pard\pardeftab720\partightenfactor0
\cf2 \CocoaLigature1 #remove abundancy from headers\
\pard\pardeftab720\sl280\partightenfactor0

\f4\fs24 \cf12 \expnd0\expndtw0\kerning0
for i in 
\f3\fs22 \cf11 \kerning1\expnd0\expndtw0 \CocoaLigature0 *_\cf5 \cb10 COIBR\cf11 \cb9 .fasta.dereplic.swarmOTU.select*chimera.unwrap\
do\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 awk -F";" '\{print $1\}' $i > $i".def"\
done\cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 #rename final files\
\pard\pardeftab720\partightenfactor0
\cf11 rename '.unwrap.def' '' *.unwrap.def\
rename 'tmp_tmp_' '' *_\cf5 \cb10 COIBR\cf11 \cb9 .fasta.dereplic.swarmOTU.select*chimera\
\pard\pardeftab720\partightenfactor0
\cf2 #cleaning\
\pard\pardeftab720\partightenfactor0
\cf11 rm tmp_*_\cf5 \cb10 COIBR\cf11 \cb9 .fasta.dereplic.swarmOTU.select\
rm *.log\
rm *.unwrap\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf22 \cb1 \CocoaLigature1 \
#details on parameters for usearch:\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\b\fs22 \cf23 \cb10 \CocoaLigature0 #-uchime3_denovo
\f3\b0  FILENAME : detect chimeras de novo\
#-uchimeout FILENAME : log file\
#-chimeras FILENAME : chimeras\
#-nonchimeras FILENAME : sequences that remain after filtering of chimeras\
#-abskew : the abundance skew is used to distinguish which sequence is the chimera and which are the parents. \
#The assumption is that chimeras appear later in the PCR amplification process and are thereforeless abundant than their parents. For --uchime3_denovo the default value is 16.0.\
\pard\pardeftab720\partightenfactor0
\cf0 \cb1 \CocoaLigature1 #-----------------------------------\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 #run script\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 sbatch usearch_chimeraDENOVO.sh\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 #monitor job\
\pard\pardeftab720\partightenfactor0
\cf12 squeue -u "
\f3\fs22 \cf5 \cb10 \CocoaLigature0 username
\f0\fs28 \cf12 \cb1 \CocoaLigature1 "\
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
### check final status of jobs \
#the cmd will print status for all jobs for which a slurm-*.out file is present in datadir\
#If everything went fine, State should be COMPLETED.\
#if State=TIMEOUT you need to increase running time.\
#if State=FAILED, you need to check the slurm-*.out file to get details on the error\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 ls slurm-*.out |awk -F"[-.]" '\{print "seff " $2 " |grep \\042Job ID\\\\|State\\042"\}' |bash\
\pard\pardeftab720\partightenfactor0

\f2\b \cf8 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 #note that this script can endup with a FAILED (exit code=1) status even if everything went right. \
#It is because you may have processed empty files (which is fine) and usearch returns an error in that specific case. \
#Nevertheless, it is safer to check that you have at least some non empty files as output to be sure that the script really worked.\
\pard\pardeftab720\partightenfactor0

\f0\b0\fs28 \cf2 \cb1 \CocoaLigature1 ### count 
\f1\b \ul empty
\f0\b0 \ulnone  outputs to make sure you have at least some non empty files (ie that the script worked)
\f3\fs22 \cb9 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 \cb10 for file in *_\cf5 COIBR\cf11 .fasta.dereplic.swarmOTU.select.remchimera; do if [[ ! -s $file ]]; then echo $file; fi; done |wc -l
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
#outputs = \
#
\f3\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode_\cf5 COIBR\cf11 .fasta.dereplic.swarmOTU.select.remchimera 
\f0\fs28 \cf2 \cb1 \CocoaLigature1 #sequences that remain after filtering of chimeras\
#
\f3\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode_\cf5 COIBR\cf11 fasta.dereplic.swarmOTU.select.chimera 
\f0\fs28 \cf2 \cb1 \CocoaLigature1 #sequences that were identified as chimeras\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 # count outputs\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 ls *_\cf5 COIBR\cf11 .fasta.dereplic.swarmOTU.select.remchimera |wc -l \cf2 \cb9 #should be equal to the nb of samples unless you have samples for which you had no input sequences (\cf11 \cb10 grep -A 1 "Fatal" slurm-\cf13 XXXXX\cf11 .out)
\f0\fs28 \cf12 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 #cleaning\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 rm usearch_chimeraDENOVO.sh slurm-*.out\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 #------------------------------------ END OPTION 1 ------------------------------------#\
\
\
\
\
#-------- OPTION 2 : look for chimeras when you\ul  
\f1\b DO HAVE\ulnone  
\f0\b0 a reference database --------#  \cf2 \cb17 #=> this is my case here
\f3\fs22 \cf0 \cb1 \

\f0\fs28 \cf2 #create script\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 nano usearch_chimeraREF.sh\
#-----------------------------------\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 \cb10 \CocoaLigature0 #!/bin/bash\
#SBATCH -J chimera\
#SBATCH -p workq\
#SBATCH -t \cf5 2:00:00\
\cf11 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf12 \cb9 module load \cf13 \cb1 bioinfo/USEARCH/11.0.667    \cf15 #adapt PATH to USEARCH\cf12 \cb9 \
\pard\pardeftab720\partightenfactor0
\cf2 \
##look for chimeras\cf11 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
for i in *_\cf5 \cb10 COIBR\cf11 \cb9 .fasta.dereplic.swarmOTU.select\
do\
usearch \cf0 \expnd0\expndtw0\kerning0
\CocoaLigature1 -uchime2_ref\cf11 \kerning1\expnd0\expndtw0 \CocoaLigature0  $i -db \cf5 \expnd0\expndtw0\kerning0
\CocoaLigature1 referencedatabase.fas\cf11 \kerning1\expnd0\expndtw0 \CocoaLigature0  -uchimeout $i".log" -chimeras $i".chimera" -strand plus -mode \cf5 specific
\f2\b  
\f3\b0 \cf11 \
done\
\pard\pardeftab720\partightenfactor0
\cf2 ##remove chimeras from initial files\
#list of initial files\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 ls *_\cf5 \cb10 COIBR\cf11 \cb9 .fasta.dereplic.swarmOTU.select > myinitialfiles\cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 #list of chimeras\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 for i in *_\cf5 \cb10 COIBR\cf11 \cb9 .fasta.dereplic.swarmOTU.select.chimera\
do\
grep ">" $i > $i".list"\
done\
\pard\pardeftab720\partightenfactor0
\cf2 #put headers and seq on the same line in initial files for future grep \cf11 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cb10 for i in \cb9 *_\cf5 \cb10 COIBR\cf11 \cb9 .fasta.dereplic.swarmOTU.select\cb10 \
do
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 awk ' \{if (/^>/) \{print $1"\'a3"\} else print $0\}' \cf11 \cb10 \CocoaLigature0 $i\cf12 \cb1 \CocoaLigature1  |tr "\\n" " " |sed s/" "/""/g |sed s/">"/"\\n>"/g |sed s/"\'a3"/" "/g |awk '\{if (NR>1) \{print\}\}' > "tmp_"\cf11 \cb10 \CocoaLigature0 $i\
done\
\pard\pardeftab720\partightenfactor0
\cf2 \cb9 #prepare and execute cmds to remove chimeras from initial files\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 \cb10 awk '\{print "grep -v -f "$0".chimera.list tmp_"$0" > "$0".remchimera"\}' \cb9 myinitialfiles |bash\
\pard\pardeftab720\partightenfactor0
\cf2 #convert final files back to fasta\
\pard\pardeftab720\partightenfactor0
\cf12 \cb10 for i in \cf11 \cb9 *_\cf5 \cb10 COIBR\cf11 \cb9 .fasta.dereplic.swarmOTU.select.remchimera\cf12 \cb10 \
do\
awk -F" " '\{print $1"\\n"$2\}' $i > $i".def"\
done\cf2  \
\pard\pardeftab720\partightenfactor0
\cf2 \cb9 #cleaning\
\pard\pardeftab720\partightenfactor0
\cf11 rm *.chimera.list\
rm *.log\
rm myinitialfiles\
rm tmp_*\
rm *_\cf5 \cb10 COIBR\cf11 \cb9 .fasta.dereplic.swarmOTU.select.remchimera\
\pard\pardeftab720\partightenfactor0
\cf2 #rename final files\
\pard\pardeftab720\partightenfactor0
\cf11 rename '.def' '' *_\cf5 \cb10 COIBR\cf11 \cb9 .fasta.dereplic.swarmOTU.select.remchimera.def\
\pard\pardeftab720\partightenfactor0
\cf2 #unwrap *.chimera files
\f0\fs28 \cf22 \cb1 \CocoaLigature1 \
\pard\pardeftab720\sl280\partightenfactor0

\f4\fs24 \cf12 \cb9 \expnd0\expndtw0\kerning0
for i in 
\f3\fs22 \cf11 \kerning1\expnd0\expndtw0 \CocoaLigature0 *_\cf5 \cb10 COIBR\cf11 \cb9 .fasta.dereplic.swarmOTU.select.chimera
\f4\fs24 \cf12 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
do\
awk '/^>/ \{printf("\\n%s\\n",$0);next; \} \{ printf("%s",$0);\}  END \{printf("\\n");\}' < 
\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 $i \cb9 > \cb10 $i".unwrap"\
done\cb9 \
\pard\pardeftab720\partightenfactor0
\cf2 \CocoaLigature1 #remove the first, empty line, in output unwrapped files
\f0\fs28 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \CocoaLigature0 sed -i '1d' *_\cf5 \cb10 COIBR\cf11 \cb9 .fasta.dereplic.swarmOTU.select.chimera.unwrap\
\pard\pardeftab720\partightenfactor0
\cf2 #cleaning \
\cf12 rm \cf11 *_\cf5 \cb10 COIBR\cf11 \cb9 .fasta.dereplic.swarmOTU.select.chimera
\f0\fs28 \cf22 \cb1 \CocoaLigature1 \

\f3\fs22 \cf2 \cb9 \CocoaLigature0 #rename final files\
\pard\pardeftab720\partightenfactor0
\cf11 rename '.unwrap' '' *_\cf5 \cb10 COIBR\cf11 \cb9 .fasta.dereplic.swarmOTU.select.chimera.unwrap\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf22 \cb1 \CocoaLigature1 \
#details on parameters for usearch:\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\b\fs22 \cf23 \cb10 \CocoaLigature0 #-uchime2_ref
\f3\b0  : detect chimeras based on a reference database\
#-db : reference database (fasta format)\
#-strand plus : mandatory even if searching on both strands is not supported\
#-mode : see https://drive5.com/usearch/manual/cmd_uchime2_ref.html for the different options\
\pard\pardeftab720\partightenfactor0
\cf0 \cb1 \CocoaLigature1 #-----------------------------------\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 #run script\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 sbatch usearch_chimeraREF.sh\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 #monitor job\
\pard\pardeftab720\partightenfactor0
\cf12 squeue -u "
\f3\fs22 \cf5 \cb10 \CocoaLigature0 username
\f0\fs28 \cf12 \cb1 \CocoaLigature1 "\
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
### check final status of jobs \
#the cmd will print status for all jobs for which a slurm-*.out file is present in datadir\
#If everything went fine, State should be COMPLETED.\
#if State=TIMEOUT you need to increase running time.\
#if State=FAILED, you need to check the slurm-*.out file to get details on the error\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 ls slurm-*.out |awk -F"[-.]" '\{print "seff " $2 " |grep \\042Job ID\\\\|State\\042"\}' |bash\
\pard\pardeftab720\partightenfactor0

\f2\b \cf8 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 #note that this script can endup with a FAILED (exit code=1) status even if everything went right. \
#It is because you may have processed empty files (which is fine) and usearch returns an error in that specific case. \
#Nevertheless, it is safer to check that you have at least some non empty files as output to be sure that the script really worked.\
\pard\pardeftab720\partightenfactor0

\f0\b0\fs28 \cf2 \cb1 \CocoaLigature1 ### count 
\f1\b \ul empty
\f0\b0 \ulnone  outputs to make sure you have at least some non empty files (ie that the script worked)
\f3\fs22 \cb9 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 \cb10 for file in *_\cf5 COIBR\cf11 .fasta.dereplic.swarmOTU.select.remchimera; do if [[ ! -s $file ]]; then echo $file; fi; done |wc -l
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
#outputs = \
#
\f3\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode_\cf5 COIBR\cf11 .fasta.dereplic.swarmOTU.select.remchimera 
\f0\fs28 \cf2 \cb1 \CocoaLigature1 #sequences that remain after filtering of chimeras\
#
\f3\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode_\cf5 COIBR\cf11 .fasta.dereplic.swarmOTU.select.chimera 
\f0\fs28 \cf2 \cb1 \CocoaLigature1 #sequences that were identified as chimeras\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 # count outputs\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 ls *_\cf5 COIBR\cf11 .fasta.dereplic.swarmOTU.select.remchimera |wc -l \cf2 \cb9 #should be equal to the nb of samples unless you have samples for which you had no input sequences (\cf11 \cb10 grep -A 1 "Fatal" slurm-\cf13 XXXXX\cf11 .out)
\f0\fs28 \cf12 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 #cleaning\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 rm usearch_chimeraREF.sh slurm-*.out\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 #------------------------------------ END OPTION 2 ------------------------------------#\
\
\
\
### get statistics\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 for i in *_\cf5 COIBR\cf11 .fasta.dereplic.swarmOTU.select.remchimera\
do\
echo $i >> $i".stats" && grep -c ">" $i >> $i".stats"\
done
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 cat *_\cf5 COIBR\cf11 .fasta.dereplic.swarmOTU.select.remchimera.stats > 
\f4\fs24 \cf12 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 tmp_
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 COIBR\cf12 _swarmselectremchimera_results\cf11 \
\
\cf0 \cb1 \CocoaLigature1 awk 'NR % 2 == 1 \{ o=$0 ; next \} \{ print o "\\t" $0 \}' 
\f4\fs24 \cf12 \expnd0\expndtw0\kerning0
tmp_
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 COIBR\cf12 _swarmselectremchimera_results |sed s/"\cf11 _\cf5 COIBR\cf11 .fasta.dereplic.swarmOTU.select.remchimera"/""/g\cf12  > \cf5 COIBR\cf12 _swarmselectremchimera_results
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0
rm *_\cf5 COIBR\cf11 .fasta.dereplic.swarmOTU.select.remchimera.stats 
\f4\fs24 \cf12 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 tmp_
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 COIBR\cf12 _swarmselectremchimera_results\cf11 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 #check results\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 \cb10 \CocoaLigature0 more \cf5 COIBR\cf12 _swarmselectremchimera_results
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f0\fs28 \cf4 \cb17 \CocoaLigature1 #expected output for the example data set\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 \cb14 \CocoaLigature0 more \cf5 COIBR\cf12 _swarmselectremchimera_results
\f0\fs28 \cf2 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \CocoaLigature0 CEXT00001_0199	0\
CPCR00001_0199	0\
EMPT00001_0199	0\
EMPT00002_0199	0\
SWAR00034_0199	5\
SWAR00035_0199	8\
SWAR00073_0199	12\
SWAR00077_0199	14\
\pard\pardeftab720\partightenfactor0
\cb10 \
\pard\pardeftab720\partightenfactor0
\cf12 \cb14 more \cf5 COIFC\cf12 _swarmselectremchimera_results
\f0\fs28 \cf2 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \CocoaLigature0 CEXT00001_0199	0\
CPCR00001_0199	0\
EMPT00001_0199	0\
EMPT00002_0199	0\
SWAR00034_0199	11\
SWAR00035_0199	11\
SWAR00073_0199	7\
SWAR00077_0199	14\
\pard\pardeftab720\partightenfactor0
\cb10 \
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ### merge statistics with 
\f3\fs22 \cf5 \cb10 \CocoaLigature0 COIBR
\f2\b \cf18 _swarmselect_table\

\f0\b0\fs28 \cf2 \cb1 \CocoaLigature1 # sort files
\f3\fs22 \cf12 \cb10 \CocoaLigature0 \
awk '\{if(NR>1) \{print\}\}' \cf5 COIBR
\f2\b \cf18 _swarmselect_table
\f3\b0 \cf12  |sort > \cf5 COIBR
\f2\b \cf18 _swarmselect_table
\f3\b0 \cf12 _sorted\
sort \cf5 COIBR\cf12 _swarmselectremchimera_results > \cf5 COIBR\cf12 _swarmselectremchimera_results_sorted\

\f0\fs28 \cf2 \cb1 \CocoaLigature1 # join files\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 join -t 
\f0\fs26 \cf19 \cb9 \expnd0\expndtw0\kerning0
\CocoaLigature1 $'\\t'
\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0  -a 1 -e "NA" -o 1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,1.10,1.11,1.12,1.13,1.14,2.2 \cf5 COIBR_
\f2\b \cf18 swarmselect_table
\f3\b0 \cf12 _sorted \cf5 COIBR\cf12 _swarmselectremchimera_results_sorted > tmp_\cf5 COIBR\cf12 _swarmselectremchimera_table\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 awk 'BEGIN\{print "samplecode\\tnPFpairedReads\\tAverageLengthPFR1\\tAverageLengthPFR2\\tncleanPFpairedReads_Trimmomatic\\tnmergedPFreads_FLASH\\tnFullAmplicons\\tninputSeq_Swarm\\tnclusters_Swarm\\tAverageNSeqinClusters_Swarm\\tMedianNSeqinClusters_Swarm\\tMinNSeqinClusters_Swarm\\tMaxNSeqinClusters_Swarm\\tnclusters_Swarm_FilterMinseq\\tnclusters_Swarm_FilterMinseqAndChimera"\} \{print $0\}' \cf12 tmp_\cf5 COIBR\cf12 _swarmselectremchimera_table \cf11 > \cf5 COIBR
\f2\b \cf18 _swarmselectremchimera_table
\f3\b0 \cf2 \
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 # cleaning\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 \cb10 \CocoaLigature0 rm *_sorted tmp_\cf5 COIBR\cf12 _swarmselectremchimera_table\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\
### summary of current output files (
\f3\fs22 \cb10 \CocoaLigature0 datadir\cf11  \cf2 =\cf11  fastq_merge
\f0\fs24 \cf2 )
\fs28 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode.extendedFrags.fastq : paired reads merged with FLASH (fastq)\
$samplecode\cf5 _COIBR\cf11 .fasta  : full length amplicon for which the primers used to amplify \cf5 COIBR \cf11 were found at both ends (fasta). Note that primers are trimed.\
$samplecode_\cf5 COIBR\cf11 .fasta.dereplic : after dereplication with VSEARCH (fasta). Note that nb of replicates (size) are included in headers
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \

\f3\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode_\cf5 COIBR\cf11 .fasta.dereplic.swarmOTU : after clustering with SWARM
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \

\f3\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode_\cf5 COIBR\cf11 .fasta.dereplic.swarmOTU.select : after clustering with SWARM and after selection of clusters based on a minimum nb of sequences\
$samplecode_\cf5 COIBR\cf11 .fasta.dereplic.swarmOTU.select.chimera : sequences that were identified as chimeras\
$samplecode_\cf5 COIBR\cf11 .fasta.dereplic.swarmOTU.select.remchimera : after clustering with SWARM; after selection of clusters based on a minimum nb of sequences; after filtering out chimeras\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf5 COIBR
\f2\b \cf18 _swarmselectremchimera_table 
\f3\b0 \cf11 current version of the follow up table including statistics for \cf5 COIBR\cf11  to be opened in excel (field separator = tab)
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\
\pard\pardeftab720\partightenfactor0

\f2\b\fs24 \cf21 \cb8 #If you have more that one gene, perform this step for all other genes. ATTENTION edit scripts and parameter values accordingly
\f0\b0 \cf2 \cb1 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf2 \
\pard\pardeftab720\partightenfactor0
\cf4 #------------------------------------------------------------------------------------------------------------\
#ADD SAMPLE CODE + CLUSTER ID TO FASTA HEADERS\
#------------------------------------------------------------------------------------------------------------\
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf8 \cb10 \CocoaLigature0 #Goal : add sample code to fasta headers + add clusterID (cluster1 for the cluster with the highest nb of seq, cluster2 for the 2nd cluster etc.) + keep nb of seq in each cluster\
#note that if several clusters contain the same nb of samples they are arbitraly ranked as we must have a different header for each consensus \
#final headers <=> >$samplecode_gene_cluster$i_size$i\
\pard\pardeftab720\partightenfactor0
\cf29 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 #I follow up on 
\f3\fs22 \cf5 \cb10 \CocoaLigature0 COIBR\cf29 \
\

\f0\fs28 \cf2 \cb1 \CocoaLigature1 #create script (you should still be in fastq_merge)\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 nano addsampletofastaheaders.sh\
#-----------------------------------\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 \cb10 \CocoaLigature0 #!/bin/bash\
#SBATCH -J editheaders\
#SBATCH -p workq\
#SBATCH -t \cf5 2:00:00\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 #merge headers and sequences on the same line for future selection\cf11 \
for i in *\cf5 _COIBR\cf11 .fasta.dereplic.swarmOTU.select.remchimera\
do
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 awk ' \{if (/^>/) \{print $1"\'a3"\} else print $0\}' \cf11 \cb10 \CocoaLigature0 $i\cf12 \cb1 \CocoaLigature1  |tr "\\n" " " |sed s/" "/""/g |sed s/">"/"\\n>"/g |sed s/"\'a3"/" "/g |awk '\{if (NR>1) \{print\}\}' > "tmp_"\cf11 \cb10 \CocoaLigature0 $i\
done\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 #rank clusters by nb of sequences\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 for i in tmp_*\cf5 _COIBR\cf11 .fasta.dereplic.swarmOTU.select.remchimera\
do\
awk '\{split($1,toto,"_") ;print toto[4]";"$0\}' $i |sed s/"size"/""/ |sort -n -r > "tmp_"$i\
done\cf2 \
#remove 1st col\
\cf11 for i in tmp_tmp_*\cf5 _COIBR\cf11 .fasta.dereplic.swarmOTU.select.remchimera\
do
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \

\f3\fs22 \cf11 \cb10 \CocoaLigature0 awk -F";" '\{print $2\}' $i > \cf12 \cb1 \CocoaLigature1 "tmp_"\cf11 \cb10 \CocoaLigature0 $i\
done\cf2 \
#add sample code + cluster ID to headers\
\cf11 for i in tmp_tmp_tmp_*\cf5 _COIBR\cf11 .fasta.dereplic.swarmOTU.select.remchimera\
do
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \

\f3\fs22 \cf11 \cb10 \CocoaLigature0 awk -F"_" '\{gsub(">","",$0) split(FILENAME,file,".") ; print ">"file[1]"_cluster"NR"_"$4\}' $i \cf12 \cb1 \CocoaLigature1 |sed s/"tmp_tmp_tmp_"/""/g > "tmp_"\cf11 \cb10 \CocoaLigature0 $i\cb9 \
\cb10 done\cf5 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 #convert back to fasta\cf5 \
\pard\pardeftab720\partightenfactor0
\cf12 for i in \cf11 tmp_tmp_tmp_tmp_*\cf5 _COIBR\cf11 .fasta.dereplic.swarmOTU.select.remchimera\cf12 \
do\
awk -F" " '\{print $1"\\n"$2\}' $i > $i".def"\
done\cf2  \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 #rename final files\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 rename 'tmp_tmp_tmp_tmp_' '' *\cf5 _COIBR\cf11 .fasta.dereplic.swarmOTU.select.remchimera.def\cf5 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 #cleaning\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 rm tmp_*\cf5 _COIBR\cf11 .fasta.dereplic.swarmOTU.select.remchimera\cf5 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb1 \CocoaLigature1 #-----------------------------------\cf5 \cb10 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 #run script\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 sbatch addsampletofastaheaders.sh\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 #monitor job\
\pard\pardeftab720\partightenfactor0
\cf12 squeue -u "
\f3\fs22 \cf5 \cb10 \CocoaLigature0 username
\f0\fs28 \cf12 \cb1 \CocoaLigature1 "\
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
### check final status of jobs \
#the cmd will print status for all jobs for which a slurm-*.out file is present in datadir\
#If everything went fine, State should be COMPLETED.\
#if State=TIMEOUT you need to increase running time.\
#if State=FAILED, you need to check the slurm-*.out file to get details on the error\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 ls slurm-*.out |awk -F"[-.]" '\{print "seff " $2 " |grep \\042Job ID\\\\|State\\042"\}' |bash\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \kerning1\expnd0\expndtw0 #output = 
\f3\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode_\cf5 COIBR\cf11 .fasta.dereplic.swarmOTU.select.remchimera.def 
\f0\fs28 \cf2 \cb1 \CocoaLigature1 files
\f3\fs22 \cf0  \

\f0\fs28 \cf2 #with headers <=> 
\f3\fs22 \cf11 \cb10 \CocoaLigature0 >$samplecode_\cf5 COIBR\cf11 _cluster$i_size$i\cf5 \

\f0\fs28 \cf2 \cb1 \CocoaLigature1 #count outputs\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 ls *_\cf5 COIBR\cf11 .fasta.dereplic.swarmOTU.select.remchimera.def |wc -l \cf2 \cb9 #should be equal to the nb of samples unless you have samples for which you had no input sequences
\f0\fs28 \cf12 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 #cleaning\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 rm addsampletofastaheaders.sh slurm-*.out\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf5 \cb10 \CocoaLigature0 \
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ### summary of current output files (
\f3\fs22 \cb10 \CocoaLigature0 datadir\cf11  \cf2 =\cf11  fastq_merge
\f0\fs24 \cf2 )
\fs28 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode.extendedFrags.fastq : paired reads merged with FLASH (fastq)\
$samplecode\cf5 _COIBR\cf11 .fasta  : full length amplicon for which the primers used to amplify \cf5 COIBR \cf11 were found at both ends (fasta). Note that primers are trimed.\
$samplecode_\cf5 COIBR\cf11 .fasta.dereplic : after dereplication with VSEARCH (fasta). Note that nb of replicates (size) are included in headers
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \

\f3\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode_\cf5 COIBR\cf11 .fasta.dereplic.swarmOTU : after clustering with SWARM
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \

\f3\fs22 \cf11 \cb10 \CocoaLigature0 $samplecode_\cf5 COIBR\cf11 .fasta.dereplic.swarmOTU.select : after clustering with SWARM and after selection of clusters based on a minimum nb of sequences\
$samplecode_\cf5 COIBR\cf11 .fasta.dereplic.swarmOTU.select.chimera : sequences that were identified as chimeras\
$samplecode_\cf5 COIBR\cf11 .fasta.dereplic.swarmOTU.select.remchimera : after clustering with SWARM; after selection of clusters based on a minimum nb of sequences; after filtering out chimeras\
$samplecode_\cf5 COIBR\cf11 .fasta.dereplic.swarmOTU.select.remchimera.def : after clustering with SWARM; after selection of clusters based on a minimum nb of sequences; after filtering out chimeras; after renaming of fasta headers to include sample code\
\pard\pardeftab720\partightenfactor0
\cf5 COIBR
\f2\b \cf18 _swarmselectremchimera_table 
\f3\b0 \cf11 current version of the follow up table including statistics for \cf5 COIBR\cf11  to be opened in excel (field separator = tab)
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf5 \cb10 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0

\f2\b\fs24 \cf21 \cb8 \CocoaLigature1 #If you have more that one gene, perform this step for all other genes. ATTENTION edit scripts and parameter values accordingly
\f0\b0 \cf2 \cb1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf5 \cb10 \CocoaLigature0 \
\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf4 \cb1 \CocoaLigature1 #------------------------------------------------------------------------------------------------------------\
#MERGE SUMMARY TABLE OF ALL GENES\
#------------------------------------------------------------------------------------------------------------\
\
#You may have several *
\f2\b\fs22 \cf18 \cb10 \CocoaLigature0 _swarmselectremchimera_table
\f0\b0\fs28 \cf4 \cb1 \CocoaLigature1  ; one for each gene (here we have FC and BR).\
#if you want to merge them in a single table do as follows.\
#note that the safest way would be to sort initial files + use the join cmd to merge files 2 x 2, then merge the combination of file1+file2 with file3 etc but if you have many genes it will be a bit time consuming\
#If you follow the tutorial, all tables should be ranked by sample codes so you can use the command paste 
\f3\fs22 \cf5 \cb10 \CocoaLigature0 \

\f0\fs28 \cf4 \cb1 \CocoaLigature1 #We will nevertheless a poteriori check that tables were ranked the same way.\
\pard\pardeftab720\partightenfactor0

\f1\b \cf8 #NOTE that if you did not carefully follow the tutorial; this will not do the trick 
\f0\b0 \cf4 \
\
#the general cmd to merge tables is :\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 paste \cf5 gene1
\f2\b \cf18 _swarmselectremchimera_table 
\f3\b0 \cf5 gene2
\f2\b \cf18 _swarmselectremchimera_table 
\f3\b0 \cf5 gene3
\f2\b \cf18 _swarmselectremchimera_table 
\f3\b0 \cf5 gene4
\f2\b \cf18 _swarmselectremchimera_table \cf12 > final_summary_table
\f3\b0 \cf5 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf4 \cb1 \CocoaLigature1 #thus for example, to merge the results from COIFC and COIBR the cmd is\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 paste \cf5 COIFC
\f2\b \cf18 _swarmselectremchimera_table 
\f3\b0 \cf5 COIBR
\f2\b \cf18 _swarmselectremchimera_table \cf12 > final_summary_table
\f3\b0 \cf5 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf4 \cb1 \CocoaLigature1 #a file named 
\f2\b\fs22 \cf12 \cb10 \CocoaLigature0 final_summary_table
\f0\b0\fs28 \cf4 \cb1 \CocoaLigature1  that can be opened in excel is created in datadir.\
#the column samplecode is repeated as many time as the nb of genes you have pasted.\
#gene1 appears first, then gene2 etc. \
\
#to double checked that tables were indeed ordered the same way, we will compare the content of the sample code columns.\
#the cmd would be\
\pard\pardeftab720\partightenfactor0

\f1\b \cf4 #for 2 genes
\f0\b0 \
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 awk '\{if($1=$1+15) \{print "OK"\} else print "ERROR"\}' 
\f2\b \cf12 final_summary_table 
\f3\b0 \cf11 |sort |uniq -c 
\f0\fs28 \cf4 \cb1 \CocoaLigature1 #will write OK each time sample codes are the same and ERROR each time they are not + will count the nb of OKs and ERROR => the nb of OK /ERROR is printed on screen. you should have as many OK as the nb of samples +1 (because the first line contains column headers)\
\pard\pardeftab720\partightenfactor0

\f1\b \cf4 #for 3 genes\
\pard\pardeftab720\partightenfactor0

\f3\b0\fs22 \cf11 \cb10 \CocoaLigature0 awk '\{if($1=$1+15 && $1=$1+30) \{print "OK"\} else print "ERROR"\}' 
\f2\b \cf12 final_summary_table 
\f3\b0 \cf11 |sort |uniq -c 
\f1\b\fs28 \cf4 \cb1 \CocoaLigature1 \
#for 4 genes\

\f3\b0\fs22 \cf11 \cb10 \CocoaLigature0 awk '\{if($1=$1+15 && $1=$1+30 && $1=$1+45) \{print "OK"\} else print "ERROR"\}' 
\f2\b \cf12 final_summary_table 
\f3\b0 \cf11 |sort |uniq -c 
\f1\b\fs28 \cf4 \cb1 \CocoaLigature1 \
#etc
\f0\b0 \
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf5 \cb10 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf8 \cb1 \CocoaLigature1 #if you have ERRORs the easiest way for you may be to combine tables in excel ...\cf4 \
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf5 \cb10 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf5 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf4 \cb1 \CocoaLigature1 #------------------------------------------------------------------------------------------------------------\
#CREATE ONE SEQUENCE FILE FOR ALL SAMPLES\
#------------------------------------------------------------------------------------------------------------\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf5 \cb10 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0
\cf5 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf4 \cb1 \CocoaLigature1 #It will be easier to have only 1 file per gene for downstream analyses\
\
#concatenation of all sequences for all samples\
\pard\pardeftab720\partightenfactor0

\f2\b\fs24 \cf8 \cb9 #If you have more that one gene, perform this step for all other genes.
\f0\b0 \cf2 \cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 cat \cf11 \cb10 \CocoaLigature0 *_\cf5 COIFC\cf11 .fasta.dereplic.swarmOTU.select.remchimera.def > \cf5 COIFC\cf11 _allseqdef.fasta\
\cf0 \cb1 \CocoaLigature1 cat \cf11 \cb10 \CocoaLigature0 *_\cf5 COIBR\cf11 .fasta.dereplic.swarmOTU.select.remchimera.def > \cf5 COIBR\cf11 _allseqdef.fasta\
\cf0 \cb1 \CocoaLigature1 cat \cf11 \cb10 \CocoaLigature0 *_\cf5 $gene2\cf11 .fasta.dereplic.swarmOTU.select.remchimera.def > \cf5 $gene2\cf11 _allseqdef.fasta\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf4 \cb1 \CocoaLigature1 #create datadir for downstream analyses\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 mkdir postprocess\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf4 #move sequences to this datadir\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 mv *_allseqdef.fasta \cf0 \cb1 \CocoaLigature1 postprocess\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf4 #cd to datadir for downstream analyses\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 cd postprocess\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf4 #count Nb of cluster per sample (this will be the starting point of a new follow up table). output = 
\f3\fs22 \cf5 \cb10 \CocoaLigature0 $gene\cf11 _allseqdef.fasta.countseq
\f0\fs28 \cf4 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 for i in *.fasta\
do\
grep ">" \cf11 \cb10 \CocoaLigature0 $i\cf0 \cb1 \CocoaLigature1  |awk -F"_" '\{print $1"_"$2\}' |sort |uniq -c |sed s/" "/""/g |awk -F">" 'BEGIN\{print "samplecode\\tNbclusterInitial"\} \{print $2"\\t"$1\}' > $i".countseq"\
done
\f0\fs28 \cf4 \

\f3\fs22 \cf0 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf4 #create follow up table(s) ; output = 
\f3\fs22 \cf5 \cb10 \CocoaLigature0 $gene
\f2\b \cf18 _countinitial_table
\f3\b0 \cf0 \cb1 \CocoaLigature1 \
rename '\cf11 \cb10 \CocoaLigature0 _allseqdef.fasta.countseq' '_countinitial_table' *.countseq\cf0 \cb1 \CocoaLigature1 \
\

\f0\fs28 \cf4 #check results\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 more *\cf11 \cb10 \CocoaLigature0 _countinitial_table\cf0 \cb1 \CocoaLigature1 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f0\fs28 \cf4 \cb17 #expected output for the example data set\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \CocoaLigature0 ::::::::::::::\
COIBR_countinitial_table\
::::::::::::::\
samplecode	NbclusterInitial\
SWAR00034_0199	5\
SWAR00035_0199	8\
SWAR00073_0199	12\
SWAR00077_0199	14\
::::::::::::::\
COIFC_countinitial_table\
::::::::::::::\
samplecode	NbclusterInitial\
SWAR00034_0199	11\
SWAR00035_0199	11\
SWAR00073_0199	7\
SWAR00077_0199	14\
\pard\pardeftab720\partightenfactor0
\cf0 \cb1 \CocoaLigature1 \
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 ### summary of current output files (
\f3\fs22 \cb10 \CocoaLigature0 datadir\cf11  \cf2 =\cf11  \cf0 \cb1 \CocoaLigature1 postprocess
\f0\fs24 \cf2 \cb10 \CocoaLigature0 )
\fs28 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf5 \cb10 \CocoaLigature0 COIBR\cf11 _allseqdef.fasta : initial clusters = sequences for all samples\
\cf5 COIBR
\f2\b \cf18 _countinitial_table 
\f3\b0 \cf11 : current version of the follow up table including statistics for \cf5 COIBR\cf11  to be opened in excel (field separator = tab)
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 \
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf4 #------------------------------------------------------------------------------------------------------------\
#\cf8 OPTIONAL :\cf4  FILTER OUT SEQUENCES WITH A MORE STRINGENT 
\f1\b \cf5 minseq
\f0\b0 \cf4 \
#------------------------------------------------------------------------------------------------------------\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf5 \cb10 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f0\fs28 \cf4 \cb17 \CocoaLigature1 #I will not do more filtering for the example data set
\f3\fs22 \cf5 \cb10 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0
\cf5 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf4 \cb1 \CocoaLigature1 #If you realised that you should have used a more stringent filtering on the minimal nb of sequences contained in a cluster for this cluster to be retained\
#you can still filter your sequences now:\
\
#cd to datadir\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 cd postprocess
\f0\fs28 \cf4 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf2 \cb10 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f0\fs28 \cf2 #extract size from headers
\f3\fs22 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 awk '\{if (/^>/) \{split($1,table,"size") ;print $0";"table[2]\} else print $0\}' \cf5 COIBR\cf11 _allseqdef.fasta > \cf12 \cb1 \CocoaLigature1  tmp_\cf5 \cb10 \CocoaLigature0 COIBR\cf11 _allseqdef.fasta\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f0\fs28 \cf2 #merge headers and sequences on the same line for future selection\cf4 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 awk '\{if (/^>/) \{print $1"\'a3"\} else print $0\}' tmp_\cf5 \cb10 \CocoaLigature0 COIBR\cf11 _allseqdef.fasta\cf12 \cb1 \CocoaLigature1  |tr "\\n" " " |sed s/" "/""/g |sed s/">"/"\\n>"/g |sed s/"\'a3"/";"/g |awk '\{if (NR>1) \{print\}\}' > tmp_tmp_\cf5 \cb10 \CocoaLigature0 COIBR\cf11 _allseqdef.fasta\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f0\fs28 \cf2 #selection of clusters based on nb of sequences in clusters. 
\f1\b \cf8 Edit
\f0\b0 \cf2  
\f1\b \cf5 minseq
\f0\b0 \cf2  
\f1\b \cf8 in cmd (if minseq=5 then clusters with 5 sequences or more will be kept) 
\f0\b0 \cf11 \
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 \cb1 \CocoaLigature1 awk -F";" '\{if($2>=
\f2\b \cf5 \cb10 \CocoaLigature0 minseq
\f3\b0 \cf12 \cb1 \CocoaLigature1 ) \{print\}\}' tmp_tmp_\cf5 \cb10 \CocoaLigature0 COIBR\cf11 _allseqdef.fasta > \cf12 \cb1 \CocoaLigature1 tmp_tmp_tmp_\cf5 \cb10 \CocoaLigature0 COIBR\cf11 _allseqdefnewsel.fasta\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f0\fs28 \cf2 #convert output to fasta\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 awk -F";" '\{print $1"\\n"$3\}' \cb1 \CocoaLigature1 tmp_tmp_tmp_\cf5 \cb10 \CocoaLigature0 COIBR\cf11 _allseqdefnewsel.fasta\cf12  > \cf5 COIBR\cf11 _allseqdefnewsel.fasta\cf12 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f0\fs28 \cf2 #cleaning\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 \cb1 \CocoaLigature1 rm tmp_*
\f0\fs28 \cf4 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf2 \cb10 \CocoaLigature0 #final output = \cf5 COIBR\cf11 _allseqdefnewsel.fasta\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf8 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f0\fs28 \cf2 #count nb of clusters per sample \cf4 \cb1 \CocoaLigature1 output = 
\f3\fs22 \cf5 \cb10 \CocoaLigature0 COIBR\cf11 _allseqdefnewsel.fasta.countseq\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 for i in *allseqdefnewsel.fasta\cf2 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb1 \CocoaLigature1 do\
grep ">" \cf11 \cb10 \CocoaLigature0 $i\cf0 \cb1 \CocoaLigature1  |awk -F"_" '\{print $1"_"$2\}' |sort |uniq -c |sed s/" "/""/g |awk -F">" 'BEGIN\{print "samplecode\\tNbclusterInitial"\} \{print $2"\\t"$1\}' > $i".countseq"\
done
\f0\fs28 \cf4 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf8 \cb10 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f0\fs28 \cf2 #add new nb of clusters to the current version (
\f3\fs22 \cf5 COIBR
\f2\b \cf18 _countinitial_table
\f3\b0 \cf2 )
\f0\fs28  of the follow up table(s)
\f3\fs22 \cf8 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 # sort files
\f3\fs22 \cf12 \cb10 \CocoaLigature0 \
awk '\{if(NR>1) \{print\}\}' \cf5 COIBR
\f2\b \cf18 _countinitial_table
\f3\b0 \cf12  |sort > \cf5 COIBR
\f2\b \cf18 _countinitial_table
\f3\b0 \cf12 _sorted\
sort \cf5 COIBR\cf11 _allseqdefnewsel.fasta.countseq\cf12  > \cf5 COIBR\cf11 _allseqdefnewsel.fasta.countseq\cf12 _sorted\

\f0\fs28 \cf2 \cb1 \CocoaLigature1 # join files\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 join -t 
\f0\fs26 \cf19 \cb9 \expnd0\expndtw0\kerning0
\CocoaLigature1 $'\\t'
\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0  -a 1 -e "NA" -o 1.1,1.2,2.2 \cf5 COIBR
\f2\b \cf18 _countinitial_table
\f3\b0 \cf12 _sorted \cf5 COIBR\cf11 _allseqdefnewsel.fasta.countseq\cf12 _sorted > tmp_\cf5 COIBR\cf12 _countinitialBIS_table\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 awk 'BEGIN\{print "samplecode\\t\cf0 \cb1 \CocoaLigature1 NbclusterInitial\cf11 \cb10 \CocoaLigature0 \\tNbClusterFilterMinSeq"\} \{print $0\}' \cf12 tmp_\cf5 COIBR\cf12 _countinitialBIS_table \cf11 > \cf5 COIBR
\f2\b \cf18 _countinitialBIS_table
\f3\b0 \cf2 \
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 # cleaning\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 \cb10 \CocoaLigature0 rm *_sorted tmp_\cf5 COIBR\cf12 _countinitialBIS_table \cf5 COIBR
\f2\b \cf18 _countinitial_table 
\f3\b0 \cf5 COIBR\cf11 _allseqdefnewsel.fasta.countseq\cf12 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf8 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f0\fs28 \cf8 #note that you may have to manage 
\f3\fs22 \cf5 COIBR
\f2\b \cf18 _countinitial_table 
\f0\b0\fs28 \cf8 and 
\f3\fs22 \cf5 COIBR
\f2\b \cf18 _countinitialBIS_table
\f3\b0 \cf8  
\f0\fs28 files for the next step. Pay attention to adapt cmds accordingly when you will create summary (=follow up) tables in the next steps.
\f3\fs22 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f1\b\fs28 \cf8 #note that it is better to remove the original fasta file that contains all clusters and rename this new file like the original file to avoid many edits in the cmds/scripts of the next steps ...
\f3\b0\fs22 \cf11 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf5 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf12 rm \cf5 COIBR\cf11 _allseqdef.fasta\
mv \cf5 COIBR\cf11 _allseqdefnewsel.fasta ./\cf5 COIBR\cf11 _allseqdef.fasta
\f0\fs28 \cf4 \cb1 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf5 \cb10 \CocoaLigature0 \
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ### summary of current output files (
\f3\fs22 \cb10 \CocoaLigature0 datadir\cf11  \cf2 =\cf11  \cf0 \cb1 \CocoaLigature1 postprocess
\f0\fs24 \cf2 \cb10 \CocoaLigature0 )
\fs28 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf5 \cb10 \CocoaLigature0 COIBR\cf11 _allseqdef.fasta : initial clusters = sequences for all samples (that were maybe refiltered according to minseq)\
\cf5 COIBR
\f2\b \cf18 _countinitial_table (2 columns if no extra minseq filtering) 
\f3\b0 \cf11 OR \cf5 COIBR
\f2\b \cf18 _countinitialBIS_table
\f3\b0 \cf11  
\f2\b \cf18 (3 columns if one extra minseq filtering)
\f3\b0 \cf11  : current version of the follow up table including statistics for \cf5 COIBR\cf11  to be opened in excel (field separator = tab)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf4 \cb1 \CocoaLigature1 #------------------------------------------------------------------------------------------------------------\
\pard\pardeftab720\partightenfactor0
\cf3 #ALIGN SEQUENCES\cf4 \
#------------------------------------------------------------------------------------------------------------\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf4 \cb1 \CocoaLigature1 #cd to datadir if you got out for whatever reason\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 cd postprocess
\f0\fs28 \cf4 \
\
#### for this step you may add one or a few validated reference sequences to help you, up to you.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf4 \cb17 # for the example data set I will use the referencedatabase I already use to filter out chimeras.\cf4 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 #copy reference sequences to datadir\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \CocoaLigature0 cp ../referencedatabase.fas .
\f0\fs28 \cf4 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf4 # merge reference sequences with other sequences\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs20 \cf12 cat \cf11 \CocoaLigature0 referencedatabase.fas\cf12 \CocoaLigature1  \cf5 \cb10 \CocoaLigature0 COIFC\cf11 _allseqdef.fasta \cf12 \cb1 \CocoaLigature1 > \cf5 \cb10 \CocoaLigature0 COIFC\cf11 _allseqdefandref.fasta\cf4 \cb1 \CocoaLigature1 \
\cf12 cat \cf11 \CocoaLigature0 referencedatabase.fas\cf12 \CocoaLigature1  \cf5 \cb10 \CocoaLigature0 COIBR\cf11 _allseqdef.fasta \cf12 \cb1 \CocoaLigature1 > \cf5 \cb10 \CocoaLigature0 COIBR\cf11 _allseqdefandref.fasta\cf4 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf4 # count sequences in file to be sure that ref seq was added\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs20 \cf12 grep -c ">" \cf11 \CocoaLigature0 referencedatabase.fas  \cf3 #3 sequences for the example referencedatabase\cf12 \CocoaLigature1 \
grep -c ">" *.fasta\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f0\fs28 \cf4 \cb17 # expected results for the example data set
\f3\fs20 \cf12 \cb1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs22 \cf30 \cb14 \CocoaLigature0 COIBR_allseqdefandref.fasta\cf31 :\cf11 42\
\cf30 COIBR_allseqdef.fasta\cf31 :\cf11 39\
\cf30 COIFC_allseqdefandref.fasta\cf31 :\cf11 46\
\cf30 COIFC_allseqdef.fasta\cf31 :\cf11 43\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\fs20 \cf12 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf4 # remove original files \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs20 \cf12 rm \cb10 \CocoaLigature0 *\cf11 _allseqdef.fasta\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf4 \cb1 \CocoaLigature1 # remove files that contain reference sequences\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs20 \cf12 rm 
\fs22 \cf11 \CocoaLigature0 referencedatabase.fas
\fs20 \cf12 \CocoaLigature1  \cf4 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f0\fs24 \cf12 \
\pard\pardeftab720\partightenfactor0
\cf12 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf4 ##### alignment of sequences (MAFFT with the linsi option)\
\pard\pardeftab720\partightenfactor0
\cf2 ### \expnd0\expndtw0\kerning0
list all files \cf8 [we will aligned all genes simultaneously]\cf0 \
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 ls *\cf12 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 .fasta\cf0 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1  > myfiles.txt   \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \kerning1\expnd0\expndtw0 ### \expnd0\expndtw0\kerning0
create a big cmd file.  
\f3\fs22 \cf5 \cb9 \kerning1\expnd0\expndtw0 \CocoaLigature0 #adapt PATH to MAFFT do not forget to espace (\\) slashes
\f0\fs28 \cf0 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs20 \cf11 \cb9 \kerning1\expnd0\expndtw0 \CocoaLigature0 awk '\{print "#!\\/bin\\/bash\\n#SBATCH -p workq\\n#SBATCH -t \cf5 01:00:00\cf11 #SBATCH --mem-per-cpu=
\f2\b \cf5 2G
\f3\b0 \cf11 \\n\\nmodule load \cf13 bioinfo\\/MAFFT\\/7.505\cf11 \cb10 \\n\\nmafft-linsi\cb9  "$1" > "$1".al"\}' \cf0 \expnd0\expndtw0\kerning0
\CocoaLigature1 myfiles.txt\cf11 \kerning1\expnd0\expndtw0 \CocoaLigature0  > tmp_cmd_mafft\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ### \expnd0\expndtw0\kerning0
split the cmd file into as many script as the nb of genes (scripts will be named mafft_1.sh to mafft_xxxx.sh)\
\pard\pardeftab720\sl280\partightenfactor0

\f4\fs24 \cf12 awk '/
\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 #!
\f4\fs24 \cf12 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 /\{filename="mafft_"NR".sh"\}; \{print >filename\}' 
\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 tmp_cmd_mafft
\f4\fs24 \cf12 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \kerning1\expnd0\expndtw0 ### \expnd0\expndtw0\kerning0
run scripts\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 for i in mafft_*.sh\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
do\
sbatch $i\
done
\f0\fs28 \cf0 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 ### monitor job \
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 squeue -u "\cf5 username\cf11 "\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 ### check final status of jobs \
#the cmd will print status for all jobs for which a slurm-*.out file is present in datadir\
#If everything went fine, State should be COMPLETED.\
#if State=TIMEOUT you need to increase running time.\
#if State=FAILED, you need to check the slurm-*.out file to get details on the error\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 ls slurm-*.out |awk -F"[-.]" '\{print "seff " $2 " |grep \\042Job ID\\\\|State\\042"\}' |bash\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \kerning1\expnd0\expndtw0 ### count output\cf0 \
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 ls *.al |wc -l
\f0\fs28    \cf2 #should return the nb of genes!\
# \expnd0\expndtw0\kerning0
cleaning\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 rm mafft_*.sh \cb9 tmp_cmd_mafft\cb10  myfiles.txt slurm-*
\f0\fs28 \cf0 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 ###outputs :\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf5 \cb10 \CocoaLigature0 COIFC\cf11 _*.al  
\f0\fs28 \cf2 \cb1 \CocoaLigature1 #aligned sequences \cf2 \cb17 #provided in \cf3 out\cb14 put/COIFC_allseqdefandref.fasta.al for the example data set
\f3\fs22 \cf11 \cb10 \CocoaLigature0 \
\cf5 COIBR\cf11 _*.al  
\f0\fs28 \cf2 \cb1 \CocoaLigature1 #aligned sequences \cf2 \cb17 #provided in \cf3 out\cb14 put/COIBR_allseqdefandref.fasta.al for the example data set
\f3\fs22 \cf11 \cb10 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\
\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf21 \cb15 \CocoaLigature1 #From here you can choose to work in Geneious (or equivalent), to visualize alignments and filter out non-coding sequences, possible chimeras, and non target sequences (e.g. symbionts, contaminants).\
#You can BLAST your sequences on whichever database (NCBI, BOLD etc); and build a phylogenetic tree \
#I provide a couple of scripts in the next section (toolbox) that can be helpful.\
#REMEMBER : IT IS RATHER IMPOSSIBLE TO FILTER OUT ALL NON TARGET SEQUENCES AUTOMATICALLY, YOU SHOULD TAKE A CRITICAL LOOK TO YOUR RESULTS\
\pard\pardeftab720\partightenfactor0
\cf21 \cb32 \
\pard\pardeftab720\partightenfactor0
\cf3 \cb33 #Results of the example data set\
#initial alignments are in output/COIFC_allseqdefandref.fasta.al and output/COIBR_allseqdefandref.fasta.al on the github rep\
#the final alignment COI FC+BR for all samples and reference sequences is in output/COIFCBR_allseqandref.fasta.al \
\
\pard\pardeftab720\partightenfactor0
\cf3 \cb14 Here are notes on all FC & BR sequences retained so far : sequence identity and rational to remove sequences during the post processing step.
\f3\fs22 \cf3 \cb33 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f0\fs28 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf3 \CocoaLigature0 ######## FC (a comment for all sequences in COIFC_allseqdefandref.fasta.al is provided)\cf5 \
\cf3 \
SWAR00034_0199_COIFC_cluster1_size1112 #\CocoaLigature1 EPCO00277_0199   # 
\f5\i T. evanescens
\f3\i0 \CocoaLigature0 \
SWAR00034_0199_COIFC_cluster2_size631  #\CocoaLigature1 EPCO00020_0199   # 
\f5\i T. cacoeciae
\f3\i0 \CocoaLigature0 \
SWAR00034_0199_COIFC_cluster3_size149  #chimera \CocoaLigature1 EPCO00277_0199 x EPCO00020_0199\CocoaLigature0 \
SWAR00034_0199_COIFC_cluster4_size65   #chimera \CocoaLigature1 EPCO00277_0199 x EPCO00020_0199\CocoaLigature0 \
SWAR00034_0199_COIFC_cluster5_size62   #chimera \CocoaLigature1 EPCO00020_0199 x EPCO00277_0199\CocoaLigature0 \
SWAR00034_0199_COIFC_cluster6_size33   #chimera \CocoaLigature1 EPCO00277_0199 x EPCO00020_0199\CocoaLigature0 \
SWAR00034_0199_COIFC_cluster7_size23   #chimera \CocoaLigature1 EPCO00020_0199 x EPCO00277_0199\CocoaLigature0 \
SWAR00034_0199_COIFC_cluster8_size16   #chimera \CocoaLigature1 EPCO00020_0199 x EPCO00277_0199\CocoaLigature0 \
SWAR00034_0199_COIFC_cluster9_size16   #chimera \CocoaLigature1 EPCO00277_0199 x EPCO00020_0199\CocoaLigature0 \
SWAR00034_0199_COIFC_cluster10_size14  #chimera \CocoaLigature1 EPCO00020_0199 x EPCO00277_0199\CocoaLigature0 \
SWAR00034_0199_COIFC_cluster11_size13  #chimera \CocoaLigature1 EPCO00277_0199 x EPCO00020_0199\CocoaLigature0 \
SWAR00035_0199_COIFC_cluster1_size818  #\CocoaLigature1 EPCO00277_0199   # 
\f5\i T. evanescens
\f3\i0 \CocoaLigature0 \
SWAR00035_0199_COIFC_cluster2_size680  #\CocoaLigature1 EPCO00020_0199   # 
\f5\i T. cacoeciae
\f3\i0 \CocoaLigature0 \
SWAR00035_0199_COIFC_cluster3_size96   #chimera \CocoaLigature1 EPCO00277_0199 x EPCO00020_0199\CocoaLigature0 \
SWAR00035_0199_COIFC_cluster4_size62   #chimera \CocoaLigature1 EPCO00277_0199 x EPCO00020_0199\CocoaLigature0 \
SWAR00035_0199_COIFC_cluster5_size39   #chimera \CocoaLigature1 EPCO00020_0199 x EPCO00277_0199\CocoaLigature0 \
SWAR00035_0199_COIFC_cluster6_size28   #chimera \CocoaLigature1 EPCO00277_0199 x EPCO00020_0199\CocoaLigature0 \
SWAR00035_0199_COIFC_cluster7_size24   #chimera \CocoaLigature1 EPCO00020_0199 x EPCO00277_0199\CocoaLigature0 \
SWAR00035_0199_COIFC_cluster8_size16   #chimera \CocoaLigature1 EPCO00020_0199 x EPCO00277_0199\CocoaLigature0 \
SWAR00035_0199_COIFC_cluster9_size14   #chimera \CocoaLigature1 EPCO00020_0199 x EPCO00277_0199\CocoaLigature0 \
SWAR00035_0199_COIFC_cluster10_size10  #chimera \CocoaLigature1 EPCO00277_0199 x EPCO00020_0199\CocoaLigature0 \
SWAR00035_0199_COIFC_cluster11_size10  #chimera \CocoaLigature1 EPCO00277_0199 x EPCO00020_0199\CocoaLigature0 \
SWAR00073_0199_COIFC_cluster1_size947  #\CocoaLigature1 EPCO00395_0199   # 
\f5\i T. brassicae
\f3\i0 \CocoaLigature0 \
SWAR00073_0199_COIFC_cluster2_size558  #\CocoaLigature1 EPCO00020_0199   # 
\f5\i T. cacoeciae
\f3\i0 \CocoaLigature0 \
SWAR00073_0199_COIFC_cluster3_size109  #\CocoaLigature1 EPCO00277_0199   # 
\f5\i T. evanescens
\f3\i0 \CocoaLigature0 \
SWAR00073_0199_COIFC_cluster4_size57   #chimera \CocoaLigature1 EPCO00395_0199 x EPCO00020_0199  \CocoaLigature0 \
SWAR00073_0199_COIFC_cluster5_size29   #chimera \CocoaLigature1 EPCO00020_0199 x EPCO00395_0199 \CocoaLigature0 \
SWAR00073_0199_COIFC_cluster6_size26   #chimera \CocoaLigature1 EPCO00395_0199 x EPCO00020_0199  \CocoaLigature0 \
SWAR00073_0199_COIFC_cluster7_size10   #chimera \CocoaLigature1 EPCO00395_0199 x EPCO00020_0199  \CocoaLigature0 \
SWAR00077_0199_COIFC_cluster1_size1139 #\CocoaLigature1 EPCO00020_0199   # 
\f5\i T. cacoeciae
\f3\i0 \CocoaLigature0 \
SWAR00077_0199_COIFC_cluster2_size177  #\CocoaLigature1 EPCO00395_0199   # 
\f5\i T. brassicae
\f3\i0 \CocoaLigature0 \
SWAR00077_0199_COIFC_cluster3_size79   #chimera \CocoaLigature1 EPCO00020_0199 x EPCO00395_0199 \CocoaLigature0 \
SWAR00077_0199_COIFC_cluster4_size76   #chimera \CocoaLigature1 EPCO00395_0199 x EPCO00020_0199  \CocoaLigature0 \
SWAR00077_0199_COIFC_cluster5_size43   #chimera \CocoaLigature1 EPCO00020_0199 x EPCO00395_0199 \CocoaLigature0 \
SWAR00077_0199_COIFC_cluster6_size34   #chimera \CocoaLigature1 EPCO00020_0199 x EPCO00395_0199 \CocoaLigature0 \
SWAR00077_0199_COIFC_cluster7_size30   #chimera \CocoaLigature1 EPCO00020_0199 x EPCO00395_0199 \CocoaLigature0 \
SWAR00077_0199_COIFC_cluster8_size27   #chimera \CocoaLigature1 EPCO00020_0199 x EPCO00395_0199 \CocoaLigature0 \
SWAR00077_0199_COIFC_cluster9_size24   #\CocoaLigature1 EPCO00277_0199   # 
\f5\i T. evanescens
\f3\i0 \CocoaLigature0 \
SWAR00077_0199_COIFC_cluster10_size17  #chimera \CocoaLigature1 EPCO00020_0199 x EPCO00395_0199 \CocoaLigature0 \
SWAR00077_0199_COIFC_cluster11_size14  #chimera \CocoaLigature1 EPCO00395_0199 x EPCO00277_0199 x EPCO00020_0199  \CocoaLigature0 \
SWAR00077_0199_COIFC_cluster12_size12  #chimera \CocoaLigature1 EPCO00020_0199 x EPCO00395_0199 \CocoaLigature0 \
SWAR00077_0199_COIFC_cluster13_size12  #chimera \CocoaLigature1 EPCO00395_0199 x EPCO00020_0199  \CocoaLigature0 \
SWAR00077_0199_COIFC_cluster14_size11  #chimera \CocoaLigature1 EPCO00020_0199 x EPCO00395_0199 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f0\fs28 \cf4 \CocoaLigature1 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf3 \CocoaLigature0 ######## BR (a comment for all sequences in COIBR_allseqdefandref.fasta.al is provided)\cf5 \
\
\cf3 SWAR00034_0199_COIBR_cluster1_size2298  #\CocoaLigature1 EPCO00277_0199   # 
\f5\i T. evanescens
\f3\i0 \CocoaLigature0 \
\CocoaLigature1 SWAR00034_0199_COIBR_cluster2_size89    #non target sequence; gaps non multiple of 3, poor alignment => discard\
SWAR00034_0199_COIBR_cluster3_size43    #non target sequence; gaps non multiple of 3, poor alignment => discard\
SWAR00034_0199_COIBR_cluster4_size30    #non target sequence; gaps non multiple of 3, poor alignment => discard\
\CocoaLigature0 SWAR00034_0199_COIBR_cluster5_size23    #\CocoaLigature1 EPCO00020_0199   # 
\f5\i T. cacoeciae
\f3\i0 \CocoaLigature0 \
SWAR00035_0199_COIBR_cluster1_size4940  #\CocoaLigature1 EPCO00277_0199   # 
\f5\i T. evanescens
\f3\i0 \CocoaLigature0 \
\CocoaLigature1 SWAR00035_0199_COIBR_cluster2_size295   #non target sequence; gaps non multiple of 3, poor alignment => discard\
SWAR00035_0199_COIBR_cluster3_size93    #non target sequence; gaps non multiple of 3, poor alignment => discard\
\CocoaLigature0 SWAR00035_0199_COIBR_cluster4_size20    #\CocoaLigature1 EPCO00020_0199   # 
\f5\i T. cacoeciae\
SWAR00035_0199_COIBR_cluster5_size18    #incomplete sequence, possibly a pseudogene or issue with PCR/sequencing => discard
\f3\i0 \CocoaLigature0 \
\CocoaLigature1 SWAR00035_0199_COIBR_cluster6_size15    #non target sequence; gaps non multiple of 3, poor alignment => discard\
\CocoaLigature0 SWAR00035_0199_COIBR_cluster7_size14    #chimera \CocoaLigature1 EPCO00277_0199 x EPCO00020_0199\CocoaLigature0 \
SWAR00035_0199_COIBR_cluster8_size13    #chimera \CocoaLigature1 EPCO00277_0199 x EPCO00020_0199\CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf3 SWAR00073_0199_COIBR_cluster1_size867   #\CocoaLigature1 EPCO00395_0199   # 
\f5\i T. brassicae
\f3\i0 \CocoaLigature0 \
SWAR00073_0199_COIBR_cluster2_size299   #\CocoaLigature1 EPCO00277_0199   # 
\f5\i T. evanescens
\f3\i0 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf3 \CocoaLigature1 SWAR00073_0199_COIBR_cluster3_size135   #non target sequence; gaps non multiple of 3, poor alignment => discard\
SWAR00073_0199_COIBR_cluster4_size107   #non target sequence; gaps non multiple of 3, poor alignment => discard\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf3 \CocoaLigature0 SWAR00073_0199_COIBR_cluster5_size68    #chimera \CocoaLigature1 EPCO00277_0199 x EPCO00395_0199 \CocoaLigature0 \
SWAR00073_0199_COIBR_cluster6_size47    #\CocoaLigature1 EPCO00020_0199   # 
\f5\i T. cacoeciae
\f3\i0 \CocoaLigature0   \
SWAR00073_0199_COIBR_cluster7_size38    #chimera \CocoaLigature1 EPCO00395_0199 x EPCO00277_0199  \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf3 \CocoaLigature1 SWAR00073_0199_COIBR_cluster8_size36    #non target sequence; gaps non multiple of 3, poor alignment => discard\
SWAR00073_0199_COIBR_cluster9_size20    #non target sequence; gaps non multiple of 3, poor alignment => discard\
SWAR00073_0199_COIBR_cluster10_size15   #non target sequence; gaps non multiple of 3, poor alignment => discard\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf3 \CocoaLigature0 SWAR00073_0199_COIBR_cluster11_size14   #chimera \CocoaLigature1 EPCO00395_0199 x EPCO00277_0199  \CocoaLigature0 \
SWAR00073_0199_COIBR_cluster12_size13   #chimera \CocoaLigature1 EPCO00395_0199 x EPCO00277_0199  \CocoaLigature0 \
SWAR00077_0199_COIBR_cluster1_size868   #\CocoaLigature1 EPCO00395_0199   # 
\f5\i T. brassicae
\f3\i0 \CocoaLigature0 \
SWAR00077_0199_COIBR_cluster2_size753   #\CocoaLigature1 EPCO00277_0199   # 
\f5\i T. evanescens
\f3\i0 \CocoaLigature0 \
SWAR00077_0199_COIBR_cluster3_size334   #\CocoaLigature1 EPCO00020_0199   # 
\f5\i T. cacoeciae
\f3\i0 \CocoaLigature0 \
SWAR00077_0199_COIBR_cluster4_size137   #chimera \CocoaLigature1 EPCO00277_0199 x EPCO00395_0199 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf3 \CocoaLigature1 SWAR00077_0199_COIBR_cluster5_size134   #non target sequence; gaps non multiple of 3, poor alignment => discard\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf3 \CocoaLigature0 SWAR00077_0199_COIBR_cluster6_size88    #chimera \CocoaLigature1 EPCO00395_0199 x EPCO00277_0199  \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf3 \CocoaLigature1 SWAR00077_0199_COIBR_cluster7_size46    #non target sequence; gaps non multiple of 3, poor alignment => discard\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf3 \CocoaLigature0 SWAR00077_0199_COIBR_cluster8_size30    #chimera \CocoaLigature1 EPCO00020_0199 x EPCO00395_0199 \CocoaLigature0 \
SWAR00077_0199_COIBR_cluster9_size24    #chimera \CocoaLigature1 EPCO00395_0199 x EPCO00277_0199  \CocoaLigature0 \
SWAR00077_0199_COIBR_cluster10_size19   #chimera \CocoaLigature1 EPCO00020_0199 x EPCO00277_0199 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf3 \CocoaLigature1 SWAR00077_0199_COIBR_cluster12_size17   #non target sequence; gaps non multiple of 3, poor alignment => discard\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf3 \CocoaLigature0 SWAR00077_0199_COIBR_cluster11_size19   #chimera \CocoaLigature1 EPCO00277_0199 x EPCO00395_0199 \CocoaLigature0 \
SWAR00077_0199_COIBR_cluster13_size13   #chimera \CocoaLigature1 EPCO00277_0199 x EPCO00395_0199 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf3 \CocoaLigature1 SWAR00077_0199_COIBR_cluster14_size10   #non target sequence; gaps non multiple of 3, poor alignment => discard\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf5 \cb10 \CocoaLigature0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf21 \cb12 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf5 \cb10 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f0\fs28 \cf3 ### toolbox for post processing of sequence data :
\f3\fs22 \cf5 \
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf4 \cb1 \CocoaLigature1 #------------------------------------------------------------------------------------------------------------\
#REMOVE SEQ WITH NB OF GAPS NON MULTIPLE OF 3 NT\
#------------------------------------------------------------------------------------------------------------
\f3\fs22 \cf5 \cb10 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf5 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf4 \cb1 \CocoaLigature1 ##### flag sequences that contain a number of gaps that is not multiple of 3 nt \cf8 \expnd0\expndtw0\kerning0
[we will work on all genes simultaneously]
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf5 \
\pard\pardeftab720\sl280\partightenfactor0

\f4\fs24 \cf12 \cb9 \expnd0\expndtw0\kerning0
\CocoaLigature1 nano gapsnonmultipleof3.sh
\f3\fs22 \cf2 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 #-------------------------------\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 \cb9 #!/bin/bash\
#SBATCH -p workq\
#SBATCH -J 
\f4\fs24 \cf12 \expnd0\expndtw0\kerning0
\CocoaLigature1 gapsnonmult3\

\f3\fs22 \cf11 \kerning1\expnd0\expndtw0 \CocoaLigature0 #SBATCH -t \cf5 1:00:00
\f4\fs24 \cf12 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0
\cf3 \cb9 \expnd0\expndtw0\kerning0
\CocoaLigature1 #unwrap al files
\f4\fs24 \cf12 \
\pard\pardeftab720\sl280\partightenfactor0
\cf12 for i in *.al\
do\
awk '/^>/ \{printf("\\n%s\\n",$0);next; \} \{ printf("%s",$0);\}  END \{printf("\\n");\}' < 
\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 $i \cb9 > \cb10 $i".unwrap"\
done\cb9 \
\pard\pardeftab720\partightenfactor0
\cf2 \CocoaLigature1 #remove the first, empty line, in output file
\f0\fs28 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \CocoaLigature0 sed -i '1d' 
\f4\fs24 \cf12 \expnd0\expndtw0\kerning0
\CocoaLigature1 *.al.unwrap
\f3\fs22 \cf11 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0
\cf3 \CocoaLigature1 #put headers and sequences on the same line\
\pard\pardeftab720\partightenfactor0
\cf12 \cb1 for i in 
\f4\fs24 \cb9 \expnd0\expndtw0\kerning0
*.al.unwrap
\f3\fs22 \cb1 \kerning1\expnd0\expndtw0 \
do\
awk ' \{if (/^>/) \{print $1"\'a3"\} else print $0\}' \cf11 \cb10 \CocoaLigature0 $i\cf12 \cb1 \CocoaLigature1  |tr "\\n" " " |sed s/" "/""/g |sed s/">"/"\\n>"/g |sed s/"\'a3"/" "/g |awk '\{if (NR>1) \{print\}\}' > "tmp_"\cf11 \cb10 \CocoaLigature0 $i\
done\cf12 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf3 \cb9 #print sequences with internal gaps not multiple of 3 / create 1 output file per input file => this will be useful to remove paralogs in the next step\
\pard\pardeftab720\partightenfactor0
\cf12 for i in \cb1 tmp_
\f4\fs24 \cb9 \expnd0\expndtw0\kerning0
*.al.unwrap
\f3\fs22 \kerning1\expnd0\expndtw0 \
do\cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 \cb10 \CocoaLigature0 awk -F" " '\{a=gsub("-","-",$0); if(
\f4\fs24 \cf12 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 a % 3) \{
\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 print $1\}\}' $i >> $i".
\f4\fs24 \cf12 \cb9 \expnd0\expndtw0\kerning0
\CocoaLigature1 gaps_nonmultipleof3"\
done
\f3\fs22 \cf3 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\partightenfactor0
\cf3 #cleaning\
\pard\pardeftab720\partightenfactor0
\cf12 rm *
\f4\fs24 \expnd0\expndtw0\kerning0
.al.unwrap\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf3 \kerning1\expnd0\expndtw0 #edit and renames outputs\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 \cb10 \CocoaLigature0 rename 'tmp_' '' *.al.unwrap.gaps_nonmultipleof3\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f4\fs24 \cf12 \cb9 \expnd0\expndtw0\kerning0
\CocoaLigature1 rename '
\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 .al.unwrap
\f4\fs24 \cf12 \cb9 \expnd0\expndtw0\kerning0
\CocoaLigature1 ' '' *
\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 .al.unwrap.gaps_nonmultipleof3\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 #-------------------------------
\f0\fs28 \cb1 \CocoaLigature1 \

\f3\fs22 \cb10 \CocoaLigature0 #run script\
\pard\pardeftab720\sl280\partightenfactor0

\f4\fs24 \cf12 \cb9 \expnd0\expndtw0\kerning0
\CocoaLigature1 sbatch gapsnonmultipleof3.sh
\f3\fs22 \cf2 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \CocoaLigature1 #monitor jobs\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 \cb10 \CocoaLigature0 squeue -u "\cf5 username\cf11 "\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 ### check final status of jobs \
#the cmd will print status for all jobs for which a slurm-*.out file is present in datadir\
#If everything went fine, State should be COMPLETED.\
#if State=TIMEOUT you need to increase running time.\
#if State=FAILED, you need to check the slurm-*.out file to get details on the error\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 ls slurm-*.out |awk -F"[-.]" '\{print "seff " $2 " |grep \\042Job ID\\\\|State\\042"\}' |bash\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \kerning1\expnd0\expndtw0 ### count output\cf0 \
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 ls *\cf11 \cb10 \CocoaLigature0 .gaps_nonmultipleof3\cf0 \cb1 \CocoaLigature1  |wc -l
\f0\fs28    \cf2 #should return the nb of genes!\
# \expnd0\expndtw0\kerning0
cleaning\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 rm 
\f4\fs24 \cf12 \cb9 \expnd0\expndtw0\kerning0
\CocoaLigature1 gapsnonmultipleof3.sh
\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0  slurm-*
\f0\fs28 \cf0 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 ###outputs :\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf5 \cb10 \CocoaLigature0 $gene\cf11 _*.gaps_nonmultipleof3  
\f0\fs28 \cf2 \cb1 \CocoaLigature1 #list of sequences with gaps non multiple of 3 nt\

\f3\fs22 \cf5 \cb10 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f2\b \cf8 \ul \ulc8 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f1\fs28 \cf8 \ulc8 #SUGGESTED WORFLOW :
\f0\b0 \cb1 \expnd0\expndtw0\kerning0
\ulnone \CocoaLigature1 \
\
#I have an automatic workflow to remove flagged sequences using command line but in this case I think that the safest way is to:\
# 1 #upload the 
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 $gene\cf11 _*.fasta.al 
\f0\fs28 \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 file(s) and the 
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 $gene\cf11 _*.fasta.gaps_nonmultipleof3 
\f0\fs28 \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 file(s) on your laptop\
# 2 #remove the 
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 $gene\cf11 _*.fasta.al \cf8 ;\cf11  
\f0\fs28 \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 the 
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 $gene\cf11 _*.fasta.gaps_nonmultipleof3 
\f0\fs28 \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 and the unaligned 
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 $gene\cf11 _*.fasta 
\f0\fs28 \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 file(s) from the cluster once step 1 is completed\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 rm *.al\
rm *.gaps_nonmultipleof3
\f0\fs28 \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 \

\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 rm *.fasta
\f0\fs28 \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
# 3 #upload the 
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 $gene\cf11 _*.fasta.al 
\f0\fs28 \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 file(s) in geneious\
# 4 #use the 
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 $gene\cf11 _*.fasta.gaps_nonmultipleof3 
\f0\fs28 \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 file(s) as a guideline to remove bad sequences in the 
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 $gene\cf11 _*.fasta.al 
\f0\fs28 \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 file(s) that you have uploaded in geneious\
     #Note that \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 if you have many sequences listed in the
\f3\fs22 \cf8  \cf5 $gene\cf11 _*.fasta.gaps_nonmultipleof3\cf8  
\f0\fs28 \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 file(s) \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 it may be because one (a few) sequence(s) has(have) an insertion of a number of nt that is not multiple of three. \
     #This sequence(s) is(are) the real (and maybe the only) paralog(s) that need(s) to be removed !\
     \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 #NOTE : you can take a look to the reference if you have one ! \
     #if you have a number of gaps that is not multiple of 3 in the reference sequence its means that there is at least one sequence in the alignment with (an) insertion(s) of a number of nt that is not  multiple of three...\
# 5 #once you have removed all sequences that needed to be removed; export the clean 
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 $gene\cf11 _*.fasta.al 
\f0\fs28 \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 file(s) from geneious (save the new file(s) as 
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 $gene\cf11 _*.rempara.fasta
\f0\fs28 \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1  ; eg.  
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 COIBR\cf11 _allseqdefandref.rempara.fasta
\f0\fs28 \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1  )\

\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 select the file and then in the menu bar : File > Export > Selected Document(s) > FASTA sequences/alignment(*.fasta) > select the directory in which you want to save the file and use \cf5 $gene\cf11 _*.rempara.fasta as filename (e.g. \cf5 COIBR\cf11 _allseqdefandref.rempara.fasta) > click proceed in the popup window that tells you that metadata may be lost if you save your file in FASTA > in the next popup window : do not check any box; export sequence in Upper case; export missing ends of alignment as gaps and click OK 
\f0\fs28 \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
# 6 #upload the 
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 $gene\cf11 _*.rempara.fasta
\f0\fs28 \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1  file(s) on your cluster in the directory 
\f3\fs22 \cf0 \kerning1\expnd0\expndtw0 postprocess
\f0\fs28 \cf8 \expnd0\expndtw0\kerning0
\
     #Note that before uploading the 
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 $gene\cf11 _*.rempara.fasta
\f0\fs28 \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1  file(s)  you should have only the \cf12 *_
\f3\fs22 \cf0 \kerning1\expnd0\expndtw0 table 
\f0\fs28 \cf8 \expnd0\expndtw0\kerning0
file(s) in 
\f3\fs22 \cf0 \kerning1\expnd0\expndtw0 postprocess
\f0\fs28 \cf8 \expnd0\expndtw0\kerning0
\
# 7 #remove gaps from the 
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 $gene\cf11 _*.rempara.fasta
\f0\fs28 \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1  file(s) with the following cmd\

\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 sed -i s/"-"/""/g *.rempara.fasta
\f0\fs28 \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
# 8 #align the 
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 $gene\cf11 _*.rempara.fasta
\f0\fs28 \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1  files [see above the MAFFT cmd]\
# 9 #run 
\f4\fs24 \cf12 \cb9 gapsnonmultipleof3.sh 
\f0\fs28 \cf8 \cb1 on the 
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 $gene\cf11 _*.rempara.fasta.al
\f0\fs28 \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1  files \
# 10 #repeat the process until you do not have any sequences flagged.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf8 \cb9 # 11 # LAST STEP on the unwrapped alignment to flag remaining gaps non multiple of 3\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \kerning1\expnd0\expndtw0 \CocoaLigature0 grep '[a-zA-Z]-[a-zA-Z]\\|[a-zA-Z]--[a-zA-Z]' \cf5 $gene\cf11 _*.rempara.fasta.al.unwrap
\f0\fs28 \cf8 \expnd0\expndtw0\kerning0
\CocoaLigature1  \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf8 \cb1 # 12 #Once you are done. keep only the final aligned files in which paralogs were removed 
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 $gene\cf11 _*.rempara.fasta.al 
\f0\fs28 \cf15 + the follow up tables : \cf12 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 *_
\f3\fs22 \cf0 \kerning1\expnd0\expndtw0 table 
\f0\fs28 \cf15 \cb10 \CocoaLigature0 in the directory 
\f3\fs22 \cf0 \cb1 \CocoaLigature1 postprocess
\f0\fs28 \cf4 \cb17 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \CocoaLigature0 \
 
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 ### summary of current output files [datadir = 
\f3\fs22 \cf0 postprocess
\f0\fs28 \cf2  ]\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf5 \cb10 \CocoaLigature0 $gene\cf11 _*.rempara.fasta.al : remaining sequences after filtering out sequences with gaps non multiple of 3 nt. Note that the sequences are aligned\
\pard\pardeftab720\partightenfactor0
\cf5 COIBR
\f2\b \cf18 _countinitial_table (2 columns if no extra minseq filtering) 
\f3\b0 \cf11 OR \cf5 COIBR
\f2\b \cf18 _countinitialBIS_table
\f3\b0 \cf11  
\f2\b \cf18 (3 columns if one extra minseq filtering)
\f3\b0 \cf11  : current version of the follow up table including statistics for \cf5 COIBR\cf11  to be opened in excel (field separator = tab)
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf8 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf8 \cb10 \CocoaLigature0  
\f0\fs28 \cf8 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf4 #------------------------------------------------------------------------------------------------------------\
#REMOVE SEQUENCES WITH INTERNAL STOP CODONS\
#------------------------------------------------------------------------------------------------------------\
\pard\pardeftab720\partightenfactor0
\cf8 \
\pard\pardeftab720\partightenfactor0
\cf4 #cd to datadir if for some reason you got out\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf0 cd postprocess
\f0\fs28 \cf4 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf8 \expnd0\expndtw0\kerning0
## Note that sequence files should be aligned and named 
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 COIBR\cf11 _*.rempara.fasta.al
\f0\fs28 \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 . If not, align them with MAFFT (see above) and /or rename files.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf8 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\partightenfactor0
\cf2 ####translation to AA\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf2 \cb10 \CocoaLigature0 ##create cmd file\cf3 \cb9 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf8 \cb10 \CocoaLigature0 #ATTENTION \
#1) 
\f2\b you must edit genetic code in the following cmd
\f3\b0  <=> table : 0=standard; 5=invertebrate mitochondrial; 11=bacterial \cf8 \cb9 \
#2) as we do not a priori know the frame (though you may have some ideas if you work always with the same genes :-) ) we\cf8 \cb10  will translate sequences with the 3 frames. the most likely frame is the one for which most sequences are coding. note that if you have a reference sequence, the frame is the one for which you do not have stop codon in the reference sequence !\
#3) adapt path to EMBOSS (escape / with \\)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 for i in \{1,2,3\}\
do\
ls \cf12 \cb21 \expnd0\expndtw0\kerning0
\CocoaLigature1 *\cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 .al |awk 'BEGIN\{print "\cb9 #!\\/bin\\/bash\\n#SBATCH -p workq\\n#SBATCH -J 
\f4\fs24 \cf12 \expnd0\expndtw0\kerning0
\CocoaLigature1 translate\\n
\f3\fs22 \cf11 \kerning1\expnd0\expndtw0 \CocoaLigature0 #SBATCH -t \cf5 1:00:00\cf12 \\n\\n\cf11 module load \cf13 bioinfo\\/EMBOSS\\/6.6.0\\\cf11 \cb10 n\cb9 "\} \{\cb10  print "transeq -frame "'\cf12 $i'"\cf11  -table 
\f2\b \cf5 5
\f3\b0 \cf11  -sequence "$1" -outseq "$1".translateframe"'\cf12 $i'\cf11 \}' > tmp_cmd\
done
\f0\fs28 \cf8 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 ### \cf2 \expnd0\expndtw0\kerning0
split the cmd file into as many script as the nb of frame (scripts will be named translate_1.sh to translate_xxxx.sh)\
\pard\pardeftab720\sl280\partightenfactor0

\f4\fs24 \cf12 awk '/
\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 #!
\f4\fs24 \cf12 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 /\{filename="translate_"NR".sh"\}; \{print >filename\}' 
\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 tmp_cmd
\f4\fs24 \cf12 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \kerning1\expnd0\expndtw0 ### \cf2 \expnd0\expndtw0\kerning0
run scripts\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 for i in translate_*.sh\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
do\
sbatch $i\
done
\f0\fs28 \cf0 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 ### monitor job \
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 squeue -u "\cf5 username\cf11 "\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 ### check final status of jobs \
#the cmd will print status for all jobs for which a slurm-*.out file is present in datadir\
#If everything went fine, State should be COMPLETED.\
#if State=TIMEOUT you need to increase running time.\
#if State=FAILED, you need to check the slurm-*.out file to get details on the error\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 ls slurm-*.out |awk -F"[-.]" '\{print "seff " $2 " |grep \\042Job ID\\\\|State\\042"\}' |bash\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \kerning1\expnd0\expndtw0 ### count output\cf0 \

\f3\fs22 ls *.\cf11 \cb10 \CocoaLigature0 translateframe*\cf0 \cb1 \CocoaLigature1  |wc -l
\f0\fs28    \cf2 #should return 3*the nb of genes!\
# \cf2 \expnd0\expndtw0\kerning0
cleaning\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 rm translate_*.sh \cb9 tmp_cmd\cb10  slurm-*
\f0\fs28 \cf0 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 ###outputs :\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf5 \cb10 \CocoaLigature0 $gene\cf11 _\cf0 \cb1 \CocoaLigature1 *.\cf11 \cb10 \CocoaLigature0 translateframe1  
\f0\fs28 \cf2 \cb1 \CocoaLigature1 #sequences translated using the 1st nt of the alignment as the 1st nt of the first codon (frame1)\

\f3\fs22 \cf5 \cb10 \CocoaLigature0 $gene\cf11 _\cf0 \cb1 \CocoaLigature1 *.\cf11 \cb10 \CocoaLigature0 translateframe2  
\f0\fs28 \cf2 \cb1 \CocoaLigature1 #sequences translated using the 2nd nt of the alignment as the 1st nt of the first codon (frame2)
\f3\fs22 \cf11 \cb10 \CocoaLigature0 \
\cf5 $gene\cf11 _\cf0 \cb1 \CocoaLigature1 *.\cf11 \cb10 \CocoaLigature0 translateframe3  
\f0\fs28 \cf2 \cb1 \CocoaLigature1 #sequences translated using the 3rd nt of the alignment as the 1st nt of the first codon (frame3)
\f3\fs22 \cf5 \cb10 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf8 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 ###detection of stop codons\cf8 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf2 \cb10 \CocoaLigature0 ###create script\
\pard\pardeftab720\sl280\partightenfactor0

\f4\fs24 \cf12 \cb9 \expnd0\expndtw0\kerning0
\CocoaLigature1 nano stopcodon.sh
\f3\fs22 \cf2 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 #-------------------------------\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 \cb9 #!/bin/bash\
#SBATCH -p workq\
#SBATCH -J 
\f4\fs24 \cf12 \expnd0\expndtw0\kerning0
\CocoaLigature1 stopcodon\

\f3\fs22 \cf11 \kerning1\expnd0\expndtw0 \CocoaLigature0 #SBATCH -t \cf5 1:00:00
\f4\fs24 \cf12 \expnd0\expndtw0\kerning0
\CocoaLigature1 \

\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0
\cf3 \cb9 \expnd0\expndtw0\kerning0
\CocoaLigature1 #unwrap AA files
\f4\fs24 \cf12 \
\pard\pardeftab720\sl280\partightenfactor0
\cf12 for i in 
\f3\fs22 \cf0 \cb1 \kerning1\expnd0\expndtw0 *.\cf11 \cb10 \CocoaLigature0 translateframe*
\f4\fs24 \cf12 \cb9 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
do\
awk '/^>/ \{printf("\\n%s\\n",$0);next; \} \{ printf("%s",$0);\}  END \{printf("\\n");\}' < 
\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 $i \cb9 > \cb10 $i".unwrap"\
done\cb9 \
\pard\pardeftab720\partightenfactor0
\cf2 \CocoaLigature1 #remove the first, empty line, in output file
\f0\fs28 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \CocoaLigature0 sed -i '1d' 
\f4\fs24 \cf12 \expnd0\expndtw0\kerning0
\CocoaLigature1 *.translateframe*.unwrap
\f3\fs22 \cf11 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0
\cf3 \CocoaLigature1 #put headers and sequences on the same line\
\pard\pardeftab720\partightenfactor0
\cf12 \cb1 for i in 
\f4\fs24 \cb9 \expnd0\expndtw0\kerning0
*.translateframe*.unwrap
\f3\fs22 \cb1 \kerning1\expnd0\expndtw0 \
do\
awk ' \{if (/^>/) \{print $1"\'a3"\} else print $0\}' \cf11 \cb10 \CocoaLigature0 $i\cf12 \cb1 \CocoaLigature1  |tr "\\n" " " |sed s/" "/""/g |sed s/">"/"\\n>"/g |sed s/"\'a3"/" "/g |awk '\{if (NR>1) \{print\}\}' > "tmp_"\cf11 \cb10 \CocoaLigature0 $i\
done\cf12 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf3 \cb9 #detect stop codons / create 1 output file per input file\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf11 \cb10 \CocoaLigature0 for i in tmp_
\f4\fs24 \cf12 \cb9 \expnd0\expndtw0\kerning0
\CocoaLigature1 *.translateframe*.unwrap
\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
do\
awk -F" " '\{if ($2 ~ /\\*/) \{print $1\}\}' $i >> $i".stopcodons"  \
done\
\pard\pardeftab720\partightenfactor0
\cf3 \cb9 \CocoaLigature1 #edit and renames outputs\
#transeq add _\'a7frame to headers so we need to remove that\cf11 \cb10 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
sed -i 's/\\(.*\\)_1/\\1/'\cf12 \cb9 \CocoaLigature1  *.\cb10 \CocoaLigature0 stopcodons\cf11 \
sed -i 's/\\(.*\\)_2/\\1/'\cf12 \cb9 \CocoaLigature1  *.\cb10 \CocoaLigature0 stopcodons\
\cf11 sed -i 's/\\(.*\\)_3/\\1/'\cf12 \cb9 \CocoaLigature1  *.\cb10 \CocoaLigature0 stopcodons\cf3 \cb9 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f4\fs24 \cf12 \expnd0\expndtw0\kerning0
rename '
\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 .unwrap
\f4\fs24 \cf12 \cb9 \expnd0\expndtw0\kerning0
\CocoaLigature1 ' '' *
\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 .stopcodons\

\f4\fs24 \cf12 \cb9 \expnd0\expndtw0\kerning0
\CocoaLigature1 rename '
\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 tmp_
\f4\fs24 \cf12 \cb9 \expnd0\expndtw0\kerning0
\CocoaLigature1 ' '' *
\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 .stopcodons\
\pard\pardeftab720\partightenfactor0
\cf3 \cb9 \CocoaLigature1 #cleaning\
\pard\pardeftab720\partightenfactor0

\f4\fs24 \cf12 \expnd0\expndtw0\kerning0
rm *.unwrap
\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 #-------------------------------\cf11 \
\cf2 ###run script\
\pard\pardeftab720\sl280\partightenfactor0

\f4\fs24 \cf12 \cb9 \expnd0\expndtw0\kerning0
\CocoaLigature1 sbatch stopcodon.sh
\f3\fs22 \cf2 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 ### monitor job \
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 squeue -u "\cf5 username\cf11 "\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 ### check final status of jobs \
#the cmd will print status for all jobs for which a slurm-*.out file is present in datadir\
#If everything went fine, State should be COMPLETED.\
#if State=TIMEOUT you need to increase running time.\
#if State=FAILED, you need to check the slurm-*.out file to get details on the error\
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf12 ls slurm-*.out |awk -F"[-.]" '\{print "seff " $2 " |grep \\042Job ID\\\\|State\\042"\}' |bash\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \kerning1\expnd0\expndtw0 ### count output\cf0 \

\f3\fs22 ls 
\f4\fs24 \cf12 \cb9 \expnd0\expndtw0\kerning0
*
\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 .stopcodons\cf0 \cb1 \CocoaLigature1  |wc -l
\f0\fs28    \cf2 #should return 3*the nb of genes!\
# \cf2 \expnd0\expndtw0\kerning0
cleaning\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 rm 
\f4\fs24 \cf12 \cb9 \expnd0\expndtw0\kerning0
\CocoaLigature1 stopcodon.sh
\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0  slurm-*
\f0\fs28 \cf0 \cb1 \CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 ###outputs :\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf5 \cb10 \CocoaLigature0 $gene\cf11 _*.fasta.rempara.al.translateframe1.stopcodons  
\f0\fs28 \cf2 \cb1 \CocoaLigature1 #list of sequences with stop codons for frame1\

\f3\fs22 \cf5 \cb10 \CocoaLigature0 $gene\cf11 _*.fasta.rempara.al.translateframe2.stopcodons  
\f0\fs28 \cf2 \cb1 \CocoaLigature1 #list of sequences with stop codons for frame2\

\f3\fs22 \cf5 \cb10 \CocoaLigature0 $gene\cf11 _*.fasta.rempara.al.translateframe3.stopcodons  
\f0\fs28 \cf2 \cb1 \CocoaLigature1 #list of sequences with stop codons for frame3\
\
\
\pard\pardeftab720\partightenfactor0
\cf2 ###determine the most likely frame\
#count sequences listed in 
\f3\fs22 \cf5 \cb10 \CocoaLigature0 $gene\cf11 _*.stopcodons
\f0\fs28 \cf8 \cb1 \CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf12 \cb10 \CocoaLigature0 wc -l \cf11 *.stopcodons 
\f0\fs28 \cf2 \cb1 \CocoaLigature1 #the most likely frame is the one for which you have the lowest nb of flagged sequences.
\f3\fs22 \cf5 \cb10 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 #use the reference sequence as a guide if you have one. List 
\f3\fs22 \cf11 \cb10 \CocoaLigature0 *.stopcodons
\f0\fs28 \cf2 \cb1 \CocoaLigature1  files that 
\f1\b \ul DO NOT
\f0\b0 \ulnone  contain the reference (ie list the frame(s) for which the reference is coding)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf12 \cb10 \CocoaLigature0 grep -L "reference" \cf11 *.stopcodons\
\
\cf5 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f1\b\fs28 \cf8 \ul \ulc8 #SUGGESTED WORFLOW :
\f0\b0 \cb1 \expnd0\expndtw0\kerning0
\ulnone \CocoaLigature1 \
\
#I have an automatic workflow to remove flagged sequences using command line but in this case I think that the safest way is to:\
# 1 #(re)upload the 
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 $gene\cf11 _*.rempara.al 
\f0\fs28 \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 file(s) if needed (you may still have them in geneious from the previous step) and upload the 
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 $gene\cf11 _*.stopcodons 
\f0\fs28 \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 file(s) on your laptop\
# 2 #remove the 
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 $gene\cf11 _*.rempara.al 
\f0\fs28 \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 and the 
\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 *translateframe* 
\f0\fs28 \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 file(s) from Genologin once step 1 is completed\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 rm *.al\
rm *translateframe*
\f0\fs28 \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
# 3 #(re)upload the 
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 $gene\cf11 _*.rempara.al 
\f0\fs28 \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 file(s) in geneious\
# 4 #use the 
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 $gene\cf11 _*.stopcodons 
\f0\fs28 \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 file(s) as a guideline to remove bad sequences in the 
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 $gene\cf11 _*.rempara.al 
\f0\fs28 \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 file(s) that you have uploaded in geneious\
# 5 #once you have removed all sequences that needed to be removed; export the clean 
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 $gene\cf11 _*.rempara.al 
\f0\fs28 \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 file(s) from geneious (save the new file(s) as 
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 $gene\cf11 _*.rempararemstop.fasta 
\f0\fs28 \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 (eg 
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 COIBR\cf11 _allseqdefandref.rempararemstop.fasta
\f0\fs28 \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 )\

\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 select the file and then in the menu bar : File > Export > Selected Document(s) > FASTA sequences/alignment(*.fasta) > select the directory in which you want to save the file and use \cf5 $gene\cf11 _*.rempararemstop.fasta as filename (e.g. \cf5 COIBR\cf11 _allseqdefandref.rempararemstop.fasta) > click proceed in the popup window that tells you that metadata may be lost if you save your file in FASTA > in the next popup window : do not check any box; export sequence in Upper case; export missing ends of alignment as gaps and click OK 
\f0\fs28 \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
# 6 #upload the 
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 $gene\cf11 _*.rempararemstop.fasta
\f0\fs28 \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1  file(s) on Genologin in the directory 
\f3\fs22 \cf0 \kerning1\expnd0\expndtw0 postprocess
\f0\fs28 \cf8 \expnd0\expndtw0\kerning0
\
     #Note that before uploading the 
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 $gene\cf11 _*.rempararemstop.fasta
\f0\fs28 \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1  file(s)  you should have only the \cf12 *_
\f3\fs22 \cf0 \kerning1\expnd0\expndtw0 table 
\f0\fs28 \cf8 \expnd0\expndtw0\kerning0
file(s) in 
\f3\fs22 \cf0 \kerning1\expnd0\expndtw0 postprocess
\f0\fs28 \cf8 \expnd0\expndtw0\kerning0
\
# 7 #remove gaps from the 
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 $gene\cf11 _*.rempararemstop.fasta
\f0\fs28 \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1  file(s) with the following cmd\

\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 sed -i s/"-"/""/g *.rempararemstop.fasta
\f0\fs28 \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
# 8 #align the 
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 $gene\cf11 _*.rempararemstop.fasta
\f0\fs28 \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1  files [see above the MAFFT cmd]\
# 9 #run 
\f4\fs24 \cf12 \cb9 stopcodon.sh 
\f0\fs28 \cf8 \cb1 on the 
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 $gene\cf11 _*.rempararemstop.fasta.al
\f0\fs28 \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1  files \
# 10 #repeat the process until you do not have any sequences flagged as non coding when you use the most likely frame.\
# 11 #Once you are done. keep only the final aligned files in which paralogs/non coding sequences were removed 
\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 $gene\cf11 _*.rempararemstop.fasta.al 
\f0\fs28 \cf15 + the follow up tables : \cf12 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 *_
\f3\fs22 \cf0 \kerning1\expnd0\expndtw0 table 
\f0\fs28 \cf15 \cb10 \CocoaLigature0 in the directory 
\f3\fs22 \cf0 \cb1 \CocoaLigature1 postprocess
\f0\fs28 \cf8 \expnd0\expndtw0\kerning0
\
\

\f3\fs22 \cf5 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \CocoaLigature1 ### summary of current output files [datadir = 
\f3\fs22 \cf0 postprocess
\f0\fs28 \cf2  ]\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf5 \cb10 \CocoaLigature0 $gene\cf11 _*.rempararemstop.fasta.al : remaining sequences after filtering out sequences with gaps non multiple of 3 nt and non coding sequences. Note that the sequences are aligned\
\cf5 COIBR
\f2\b \cf18 _countinitial_table (2 columns if no extra minseq filtering) 
\f3\b0 \cf11 OR \cf5 COIBR
\f2\b \cf18 _countinitialBIS_table
\f3\b0 \cf11  
\f2\b \cf18 (3 columns if one extra minseq filtering)
\f3\b0 \cf11  : current version of the follow up table including statistics for \cf5 COIBR\cf11  to be opened in excel (field separator = tab)
\f0\fs28 \cf2 \cb1 \CocoaLigature1 \

\f3\fs22 \cf5 \cb10 \CocoaLigature0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf5 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf4 \cb1 \CocoaLigature1 #------------------------------------------------------------------------------------------------------------\
#next steps ...\
#------------------------------------------------------------------------------------------------------------\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf5 \cb10 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf4 \cb1 \CocoaLigature1 #it depends on what you want to do with these sequences ! \
#Create a reference database; perform assigment to species by comparison to a reference database ... there are many possibilities\
\
#In any cases, 
\f1\b \cf8 DO NOT FORGET to critically examine final sequences to be sure that all chimeras have been removed.
\f0\b0 \cf4 \
\
#Some ideas :
\f3\fs22 \cf5 \cb10 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf5 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf4 \cb1 \CocoaLigature1 #you may build a phylogenetic tree with the final sequences + your reference sequences to check for potential heteroplasms\
#you may perform a BLAST analysis on a given reference database ...\
\
#this is up to you !
\f3\fs22 \cf5 \cb10 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf5 \
\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf4 \cb1 \CocoaLigature1 ####-------------------------- build a phylogenetic tree --------------------------####\
\pard\pardeftab720\partightenfactor0

\f1\b \cf8 \expnd0\expndtw0\kerning0
#NOTE : the cmds will work if you have many files or a single file 
\f0\b0 \cf2 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
\
## convert individual fasta files to .phy\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 for i in *\cf5 .al\cf11 ; do \cf13 /rootedpathtofile\cf13 \cb9 /\cf11 Fasta2Phylip.pl \cb10 $i $i".phy"; done   \cf8 #script \cf8 \cb9 Fasta2Phylip.pl \cf8 \cb10 available from https://github.com/josephhughes/Sequence-manipulation/tree/master
\f0\fs28 \cf18 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf34 \
## OPTIONAL / IF NEEDED . remove Undetermined and reference sequences from phy file\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 for i in *.phy\
do\
grep -v "Undetermined\\|reference" $i > $i".\cf5 remundetandref\cf11 "\
done\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf8 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 #ATTENTION EDIT OUTPUT FILE WITH NANO TO ADJUST THE NB OF SEQUENCES IN FILE\cf34 \
\
## list all .phy files (even if you have only one file !)\cf0 \
\pard\pardeftab720\partightenfactor0

\f3\fs24 \cf0 ls *.phy > my_phyfiles.txt
\f0\fs28     \cf8 #or, if you removed undetermined and reference sequences : 
\f3\fs24 \cf0 ls *.phy
\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 .\cf5 remundetandref
\fs24 \cf0 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1  > my_phyfiles.txt
\f0\fs28 \
\
\pard\pardeftab720\partightenfactor0
\cf2 ## create a big cmd file with all scripts \
\pard\pardeftab720\partightenfactor0

\f1\b \cf8 #if you do not change anything in the following cmd you will perform an ML search using the best evolutionary model choosen by ModelFinder and Node support will be assessed by 100 standard BP replicates. \
#The analysis will be run on the workq for 1 day and will use 2 cpus and 2G per cpus <=> 4Go, which should be fine for most data sets\
#take a look to the IQ-TREE website to have all infos on this soft\
#adapt path to IQTREE (escape / with \\)
\f0\b0 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb9 \kerning1\expnd0\expndtw0 \CocoaLigature0 awk '\{print "#!\\/bin\\/bash\\n#SBATCH -p \cf5 workq\cf11 \\n#SBATCH -t \cf5 01-00:00:00\cf11 \\n#SBATCH --cpus-per-task=
\f2\b \cf5 2
\f3\b0 \cf11 \\n#SBATCH --mem-per-cpu=
\f2\b \cf5 2G
\f3\b0 \cf11 \\n\\nmodule load \cf13 bioinfo\\/IQ-TREE\\/2.2.2.6\cf11 \\n\\n\cb10 iqtree2 -T \cf5 2 \cf12 -s\cf11 \cb9  "$1" \cb10 -b \cf5 100\cf11  --prefix \cb9 IQTREE_"$1" -m 
\f2\b \cf5 TEST
\f3\b0 \cf11 \\n"\}' 
\f0\fs28 \cf0 \expnd0\expndtw0\kerning0
\CocoaLigature1 my_phyfiles.txt
\f3\fs22 \cf11 \kerning1\expnd0\expndtw0 \CocoaLigature0  > tmp_cmd\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf0 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\pard\pardeftab720\partightenfactor0
\cf2 #split the cmd file into as many script as the nb of phy files\
\pard\pardeftab720\sl280\partightenfactor0

\f4\fs24 \cf12 awk '/
\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 #!
\f4\fs24 \cf12 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 /\{filename="iqtree_"NR".sh"\}; \{print >filename\}' 
\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 tmp_cmd
\f4\fs24 \cf12 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 #run all scripts\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 for i in iqtree_*.sh\
do\
sbatch $i\
done\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 ### monitor jobs \
\pard\pardeftab720\partightenfactor0

\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 squeue -u "\cf5 username\cf11 "\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 #output :\cf0 \
\cf2 #the output you should take a look to is the *.treefile \
#the branches will be assigned with a bootstrap support value, which are readable by any tree viewer program.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 #cleaning\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf11 \cb10 \kerning1\expnd0\expndtw0 \CocoaLigature0 rm slurm-* iqtree_*.sh \cb9 tmp_cmd\cb10 \
\
\
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb1 \expnd0\expndtw0\kerning0
\CocoaLigature1 #you may annotate your tree with Figtree, TreeGraph or equivalents\cf8 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf8 \
\pard\pardeftab720\partightenfactor0
\cf4 \kerning1\expnd0\expndtw0 ####--------------------------END : build a phylogenetic tree --------------------------####\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 \
\
\pard\pardeftab720\partightenfactor0
\cf4 #------------------------------------------------------------------------------------------------------------\
#merge of COIFC+COIBR to get the complete barcode\
#------------------------------------------------------------------------------------------------------------\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f3\fs22 \cf5 \cb10 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb9 \CocoaLigature1 #this is safer to do this manually in Geneious of equivalent not to mix strains together !\cf2 \cb1 \
\
\
\
\
}